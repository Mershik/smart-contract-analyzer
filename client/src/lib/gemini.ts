import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import { type ContractParagraph } from "@shared/schema";

const MODEL_NAME = 'gemini-2.5-flash';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏
const CHUNKING_CONFIG = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —á–∞–Ω–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∞)
  MAX_TOKENS_PER_CHUNK: 3000, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 6000 –¥–æ 3000 —Ç–æ–∫–µ–Ω–æ–≤
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á—É–Ω–∫–∞–º–∏
  OVERLAP_SENTENCES: 1, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2 –¥–æ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∞–±–∑–∞—Ü–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
  MAX_PARAGRAPH_LENGTH: 1500,
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  MIN_CONTENT_LENGTH: 20,
};

// –ü—É–ª API –∫–ª—é—á–µ–π —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º round-robin
class ApiKeyPool {
  private keys: string[] = [];
  private currentIndex = 0;
  private keyUsageCount: Map<string, number> = new Map();
  private exhaustedKeys: Set<string> = new Set();

  constructor() {
    const apiKeyEnv = import.meta.env.VITE_API_KEY;
    if (!apiKeyEnv) {
      throw new Error("VITE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    this.keys = apiKeyEnv.split(',').map((key: string) => key.trim()).filter((key: string) => key.length > 0);
    
    if (this.keys.length === 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö API –∫–ª—é—á–µ–π");
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.keys.forEach(key => {
      this.keyUsageCount.set(key, 0);
    });
    
    console.log(`üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª –∏–∑ ${this.keys.length} API –∫–ª—é—á–µ–π`);
  }

  getNextKey(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
    const availableKeys = this.keys.filter(key => !this.exhaustedKeys.has(key));
    
    if (availableKeys.length === 0) {
      throw new Error("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã");
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª—é—á–∞
    let attempts = 0;
    while (attempts < this.keys.length) {
      const key = this.keys[this.currentIndex];
      this.currentIndex = (this.currentIndex + 1) % this.keys.length;
      
      if (!this.exhaustedKeys.has(key)) {
        const currentCount = this.keyUsageCount.get(key) || 0;
        this.keyUsageCount.set(key, currentCount + 1);
        console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á ${key.substring(0, 10)}... (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${currentCount + 1} —Ä–∞–∑, –¥–æ—Å—Ç—É–ø–Ω–æ ${this.getAvailableKeyCount()}/${this.getKeyCount()})`);
        return key;
      }
      
      attempts++;
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π API –∫–ª—é—á");
  }

  markKeyAsExhausted(key: string): void {
    this.exhaustedKeys.add(key);
    console.warn(`‚ö†Ô∏è –ö–ª—é—á ${key.substring(0, 10)}... –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π`);
  }

  getKeyCount(): number {
    return this.keys.length;
  }

  getAvailableKeyCount(): number {
    return this.keys.length - this.exhaustedKeys.size;
  }

  getKeyUsageCount(key: string): number {
    return this.keyUsageCount.get(key) || 0;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –∫–ª—é—á–µ–π
const keyPool = new ApiKeyPool();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ "–≥—Ä—è–∑–Ω–æ–≥–æ" –æ—Ç–≤–µ—Ç–∞
function extractJsonFromResponse(rawResponse: string): any {
  console.log("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:", rawResponse.substring(0, 200));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  if (!rawResponse || rawResponse.trim().length === 0) {
    console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
    return {
      chunkId: "unknown",
      analysis: []
    };
  }
  
  let cleanedResponse = rawResponse.trim();
  
  // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
  if (cleanedResponse.includes('```json')) {
    const jsonMatch = cleanedResponse.match(/```json\s*([\s\S]*?)\s*```/);
    if (jsonMatch) {
      cleanedResponse = jsonMatch[1].trim();
    }
  } else if (cleanedResponse.includes('```')) {
    const codeMatch = cleanedResponse.match(/```\s*([\s\S]*?)\s*```/);
    if (codeMatch) {
      cleanedResponse = codeMatch[1].trim();
    }
  }
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  cleanedResponse = cleanedResponse
    .replace(/\t/g, ' ')
    .replace(/\u00A0/g, ' ')
    .replace(/\u2028/g, ' ')
    .replace(/\u2029/g, ' ')
    // eslint-disable-next-line no-control-regex
    .replace(/[\x00-\x1F\x7F-\x9F]/g, ' ');
  
  // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
  try {
    return JSON.parse(cleanedResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
    console.log("üìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π:", rawResponse.length);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
    let repairedJson = cleanedResponse;
    
    // –ï—Å–ª–∏ JSON –æ–±—Ä–µ–∑–∞–Ω –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –µ—ë
    if (repairedJson.includes('"') && !repairedJson.endsWith('"')) {
      const lastQuoteIndex = repairedJson.lastIndexOf('"');
      const afterLastQuote = repairedJson.substring(lastQuoteIndex + 1);
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–≤—ã—á–∫–∏ –Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
      if (!afterLastQuote.includes('"') && !afterLastQuote.includes('}')) {
        repairedJson = repairedJson.substring(0, lastQuoteIndex + 1) + '"';
        console.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É");
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    let openBrackets = 0;
    let openBraces = 0;
    
    for (let i = 0; i < repairedJson.length; i++) {
      if (repairedJson[i] === '{') openBraces++;
      else if (repairedJson[i] === '}') openBraces--;
      else if (repairedJson[i] === '[') openBrackets++;
      else if (repairedJson[i] === ']') openBrackets--;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    while (openBrackets > 0) {
      repairedJson += ']';
      openBrackets--;
    }
    while (openBraces > 0) {
      repairedJson += '}';
      openBraces--;
    }
    
    // –£–±–∏—Ä–∞–µ–º trailing commas –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
    repairedJson = repairedJson
      .replace(/,\s*}/g, '}')
      .replace(/,\s*]/g, ']');
    
    console.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON:", repairedJson.substring(0, 300));
    
    try {
      return JSON.parse(repairedJson);
    } catch (secondError) {
      console.error("‚ùå –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:", secondError);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
      if (rawResponse.includes('isContradiction')) {
        console.log("üîç –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
        const fallbackResult = {
          isContradiction: false,
          severity: "low",
          explanation: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ",
          recommendation: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å isContradiction
        const contradictionMatch = rawResponse.match(/"isContradiction":\s*(true|false)/);
        if (contradictionMatch) {
          fallbackResult.isContradiction = contradictionMatch[1] === 'true';
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å severity
        const severityMatch = rawResponse.match(/"severity":\s*"(high|medium|low)"/);
        if (severityMatch) {
          fallbackResult.severity = severityMatch[1] as "high" | "medium" | "low";
        }
        
        return fallbackResult;
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const jsonMatches = rawResponse.match(/{[^}]*"chunkId"[^}]*}/g);
      if (jsonMatches && jsonMatches.length > 0) {
        console.log("üîç –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π JSON —Å chunkId");
        for (const jsonMatch of jsonMatches) {
          try {
            const partial = JSON.parse(jsonMatch + ', "analysis": []}');
            return partial;
          } catch (e) {
            continue;
          }
        }
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.warn("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á—É–Ω–∫–∞");
      return {
        chunkId: "failed",
        analysis: []
      };
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createChunksWithTokens(
  paragraphs: Array<{ id: string; text: string }>, 
  maxTokensPerChunk: number = CHUNKING_CONFIG.MAX_TOKENS_PER_CHUNK,
  overlapSentences: number = CHUNKING_CONFIG.OVERLAP_SENTENCES
): Array<{ id: string; paragraphs: Array<{ id: string; text: string }>, tokenCount: number, hasOverlap: boolean }> {
  
  const chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }>, tokenCount: number, hasOverlap: boolean }> = [];
  let currentChunk: Array<{ id: string; text: string }> = [];
  let currentTokenCount = 0;
  let previousChunkSentences: string[] = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  const countTokens = (text: string): number => {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 1 —Ç–æ–∫–µ–Ω = 0.75 —Å–ª–æ–≤–∞
    return Math.ceil(text.split(/\s+/).length / 0.75);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const getLastSentences = (text: string, count: number): string[] => {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    return sentences.slice(-count).map(s => s.trim() + '.');
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const createOverlapText = (sentences: string[]): string => {
    if (sentences.length === 0) return '';
    return `[–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–†–ï–î–´–î–£–©–ï–ì–û –ß–ê–ù–ö–ê]: ${sentences.join(' ')}`;
  };
  
  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const paragraphTokens = countTokens(paragraph.text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
    const overlapTokens = previousChunkSentences.length > 0 ? 
      countTokens(createOverlapText(previousChunkSentences)) : 0;
    
    if (currentTokenCount + paragraphTokens + overlapTokens > maxTokensPerChunk && currentChunk.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞–Ω–∫–∞
      const lastParagraphText = currentChunk[currentChunk.length - 1]?.text || '';
      previousChunkSentences = getLastSentences(lastParagraphText, overlapSentences);
      
      // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫
      chunks.push({
        id: `chunk_${chunks.length + 1}`,
        paragraphs: [...currentChunk],
        tokenCount: currentTokenCount,
        hasOverlap: false
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
      currentChunk = [];
      currentTokenCount = 0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —á–∞–Ω–∫–∞
      if (previousChunkSentences.length > 0) {
        const overlapText = createOverlapText(previousChunkSentences);
        currentChunk.push({
          id: `overlap_${chunks.length + 1}`,
          text: overlapText
        });
        currentTokenCount += countTokens(overlapText);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü
    currentChunk.push(paragraph);
    currentTokenCount += paragraphTokens;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
  if (currentChunk.length > 0) {
    chunks.push({
      id: `chunk_${chunks.length + 1}`,
      paragraphs: currentChunk,
      tokenCount: currentTokenCount,
      hasOverlap: previousChunkSentences.length > 0
    });
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤:`);
  chunks.forEach((chunk, index) => {
    console.log(`   –ß–∞–Ω–∫ ${index + 1}: ${chunk.tokenCount} —Ç–æ–∫–µ–Ω–æ–≤, ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤${chunk.hasOverlap ? ' (—Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º)' : ''}`);
  });
  
  return chunks;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–±–∑–∞—Ü–µ–≤
function createChunks(paragraphs: Array<{ id: string; text: string }>, chunkSize: number = 15): Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }> {
  const chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }> = [];
  
  for (let i = 0; i < paragraphs.length; i += chunkSize) {
    const chunkParagraphs = paragraphs.slice(i, i + chunkSize);
    chunks.push({
      id: `chunk_${chunks.length + 1}`,
      paragraphs: chunkParagraphs
    });
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ${chunkSize} –∞–±–∑–∞—Ü–µ–≤:`);
  chunks.forEach((chunk, index) => {
    console.log(`   –ß–∞–Ω–∫ ${index + 1}: ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤`);
  });
  
  return chunks;
}

// –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429
async function analyzeChunk(
  chunk: { id: string; paragraphs: Array<{ id: string; text: string }> },
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier'
): Promise<any> {
  const maxRetries = 3;
  let lastError: Error | null = null;
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const keyToUse = keyPool.getNextKey();
    
    try {
      const genAI = new GoogleGenerativeAI(keyToUse);
      const model = genAI.getGenerativeModel({ 
        model: MODEL_NAME,
        systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
      });

      const perspectiveContext = perspective === 'buyer'
        ? { role: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è', beneficiary: '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' }
        : { role: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞', beneficiary: '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' };

      const chunkPrompt = `–ê–Ω–∞–ª–∏–∑ –¥–ª—è ${perspectiveContext.role}. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
"checklist" - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)
"partial" - —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
"risk" - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∏—Å–∫–∏ –¥–ª—è ${perspectiveContext.beneficiary} (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)  
"ambiguous" - –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ("—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ", "–ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é", "–∏–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
"deemed_acceptance" - —Ä–∏—Å–∫–∏ –º–æ–ª—á–∞–Ω–∏—è/–±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è (—á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –µ—Å–ª–∏ —Å—Ç–æ—Ä–æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ä–æ–∫?)
"external_refs" - —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ì–û–°–¢—ã, –¢–£, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã, –ø—Ä–∞–≤–∏–ª–∞)
null - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—à—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –∞–±–∑–∞—Ü–µ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏, —Å—É–º–º—ã, —É—Å–ª–æ–≤–∏—è), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏! –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–†–û–¢–ò–í–û–†–ï–ß–ò–ï: –ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω —Å—Ä–æ–∫ 10 –¥–Ω–µ–π, –Ω–æ –≤ –ø.5.2 —É–∫–∞–∑–∞–Ω–æ 5 –¥–Ω–µ–π –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
1. "deemed_acceptance": –ï—Å–ª–∏ –≤ –ø—É–Ω–∫—Ç–µ –µ—Å—Ç—å —Å—Ä–æ–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ù–ï –æ–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, —ç—Ç–æ —Ä–∏—Å–∫! –°–ø—Ä–æ—Å–∏ —Å–µ–±—è: "–ß—Ç–æ –µ—Å–ª–∏ —Å—Ç–æ—Ä–æ–Ω–∞ –ù–ï –≤—ã–ø–æ–ª–Ω–∏—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ä–æ–∫?"
2. "external_refs": –õ—é–±–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ì–û–°–¢, –¢–£, –°–∞–Ω–ü–∏–ù, –ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã - —ç—Ç–æ —Å–∫—Ä—ã—Ç—ã–π —Ä–∏—Å–∫ –Ω–µ–∑–Ω–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –Ω–æ –∏ –ø—Ä–∞–≤–∞: —Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è/–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã?

–ê–±–∑–∞—Ü—ã: ${JSON.stringify(chunk.paragraphs)}

JSON:
{
  "chunkId": "${chunk.id}",
  "analysis": [
    {
      "id": "p1", 
      "category": "checklist",
      "comment": null,
      "recommendation": null
    },
    {
      "id": "p2", 
      "category": "deemed_acceptance",
      "comment": "–ù–µ –æ–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –µ—Å–ª–∏ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å—Ä–æ–∫ - –º–æ–ª—á–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—Ä–∞–≤–Ω–µ–Ω–æ –∫ —Å–æ–≥–ª–∞—Å–∏—é",
      "recommendation": "–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç: '–ü—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ —Ç–æ–≤–∞—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—ã–º'"
    },
    {
      "id": "p3", 
      "category": "external_refs",
      "comment": "–°—Å—ã–ª–∫–∞ –Ω–∞ –ì–û–°–¢ 8267-93 - –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é –¥–æ–≥–æ–≤–æ—Ä–∞",
      "recommendation": "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ì–û–°–¢ 8267-93 –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –µ–≥–æ –∫ –¥–æ–≥–æ–≤–æ—Ä—É"
    }
  ]
}`;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: chunkPrompt }] }],
        generationConfig: {
          responseMimeType: "application/json",
          temperature: 0.1,
          maxOutputTokens: 8000,
          topP: 0.95,
          topK: 64,
        },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
        ],
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      const finishReason = result.response?.candidates?.[0]?.finishReason;
      if (finishReason && finishReason !== 'STOP') {
        console.warn(`‚ö†Ô∏è ${chunk.id}: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - ${finishReason}`);
        
        if (finishReason === 'MAX_TOKENS') {
          console.warn(`‚ö†Ô∏è ${chunk.id}: –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤`);
        }
      }

      const rawResponse = result.response.text();
      console.log(`üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è ${chunk.id}:`, rawResponse.substring(0, 300));
      
      return extractJsonFromResponse(rawResponse);
      
    } catch (error: any) {
      lastError = error;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π 429 (–∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞)
      if (error.message && error.message.includes('429') && error.message.includes('Resource has been exhausted')) {
        console.warn(`‚ö†Ô∏è ${chunk.id}: –ö–ª—é—á ${keyToUse.substring(0, 10)}... –∏—Å—á–µ—Ä–ø–∞–ª –∫–≤–æ—Ç—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π`);
        keyPool.markKeyAsExhausted(keyToUse);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (keyPool.getAvailableKeyCount() > 0) {
          console.log(`üîÑ ${chunk.id}: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          continue;
        } else {
          console.error(`‚ùå ${chunk.id}: –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–≤–æ—Ç—ã`);
          throw error;
        }
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      console.warn(`‚ö†Ô∏è ${chunk.id}: –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries}):`, error.message);
      if (attempt < maxRetries - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1))); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      }
    }
  }
  
  throw lastError || new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞–Ω–∫ ${chunk.id} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
async function processChunksInParallel(
  chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }>,
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any[]> {
  const results: any[] = [];
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
  const batchSize = Math.min(3, keyPool.getAvailableKeyCount()); // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
  const batchDelay = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
  
  console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${chunks.length} —á–∞–Ω–∫–æ–≤ (–±–∞—Ç—á–∏ –ø–æ ${batchSize}, –ø–∞—É–∑–∞ ${batchDelay}ms)`);
  
  let processedChunks = 0;
  const totalChunks = chunks.length;
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —á–∞–Ω–∫–∏ –Ω–∞ –±–∞—Ç—á–∏
  for (let i = 0; i < chunks.length; i += batchSize) {
    const batch = chunks.slice(i, i + batchSize);
    const batchNumber = Math.floor(i / batchSize) + 1;
    const totalBatches = Math.ceil(chunks.length / batchSize);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const percentComplete = Math.round((processedChunks / totalChunks) * 100);
    onProgress(`–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞... ${percentComplete}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç—á ${batchNumber}: —á–∞–Ω–∫–∏ ${i + 1}-${Math.min(i + batchSize, chunks.length)}`);
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const batchPromises = batch.map(async (chunk, index) => {
        const chunkNumber = i + index + 1;
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${chunkNumber} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤`);
        
        try {
          const result = await analyzeChunk(chunk, checklistText, riskText, perspective);
          console.log(`‚úÖ –ß–∞–Ω–∫ ${chunkNumber} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
          return { index: chunkNumber - 1, result };
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞–Ω–∫–µ ${chunkNumber}:`, error);
          throw new Error(`–ß–∞–Ω–∫ ${chunkNumber}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
      const batchResults = await Promise.allSettled(batchPromises);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      batchResults.forEach((result, batchIndex) => {
        if (result.status === 'fulfilled') {
          results[result.value.index] = result.value.result;
          processedChunks++;
        } else {
          const chunkNumber = i + batchIndex + 1;
          console.error(`‚ùå –ë–∞—Ç—á ${batchNumber}, —á–∞–Ω–∫ ${chunkNumber} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, result.reason);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞–Ω–∫ ${chunkNumber}: ${result.reason}`);
        }
      });
      
      console.log(`‚úÖ –ë–∞—Ç—á ${batchNumber} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (${batch.length} —á–∞–Ω–∫–æ–≤)`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
      const updatedPercent = Math.round((processedChunks / totalChunks) * 100);
      onProgress(`–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞... ${updatedPercent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
      if (i + batchSize < chunks.length) {
        const availableKeys = keyPool.getAvailableKeyCount();
        const actualDelay = availableKeys > 6 ? batchDelay * 0.7 : batchDelay; // –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π
        
        console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ ${actualDelay}ms –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: ${availableKeys})`);
        onProgress(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∞...`);
        await new Promise(resolve => setTimeout(resolve, actualDelay));
      }
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchNumber}:`, error);
      throw error;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
  const processedCount = results.filter(r => r !== undefined).length;
  console.log(`üìä –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processedCount}/${chunks.length} —á–∞–Ω–∫–æ–≤`);
  
  if (processedCount !== chunks.length) {
    throw new Error(`–ù–µ –≤—Å–µ —á–∞–Ω–∫–∏ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${processedCount}/${chunks.length}`);
  }
  
  return results;
}

// –°–≤–æ–¥–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
async function performStructuralAnalysis(
  contractText: string,
  chunkResults: any[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  onProgress("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞...");
  
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const structuralPrompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ê–ë–ó–ê–¶–ï–í:
${JSON.stringify(chunkResults, null, 2)}

–í–µ—Ä–Ω–∏ JSON —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π:
{
  "structuralAnalysis": {
    "overallAssessment": "–ö—Ä–∞—Ç–∫–∞—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    "keyRisks": ["–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ 1", "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ 2"],
    "structureComments": "–ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
    "legalCompliance": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
    "recommendations": ["–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
  }
}`;

  const result = await model.generateContent({
    contents: [{ role: "user", parts: [{ text: structuralPrompt }] }],
    generationConfig: {
      responseMimeType: "application/json",
      temperature: 0.1,
      maxOutputTokens: 8000,
      topP: 0.95,
      topK: 64,
    },
    safetySettings: [
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
      },
    ],
  });

  const rawResponse = result.response.text();
  console.log("üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", rawResponse.substring(0, 300));
  
  return extractJsonFromResponse(rawResponse);
}

// –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async function findMissingRequirements(
  contractText: string,
  checklistText: string,
  foundConditions: string[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  onProgress("–ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...");
  
  const keyToUse = keyPool.getNextKey();
  console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á ${keyToUse.substring(0, 10)}... (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${keyPool.getKeyUsageCount(keyToUse)} —Ä–∞–∑, –¥–æ—Å—Ç—É–ø–Ω–æ ${keyPool.getAvailableKeyCount()}/${keyPool.getKeyCount()})`);
  
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const missingPrompt = `–ù–∞–π–¥–∏ 3-5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Å—Ä–∞–≤–Ω–∏–≤ —á–µ–∫-–ª–∏—Å—Ç —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.

–ü–û–õ–ù–´–ô –ß–ï–ö-–õ–ò–°–¢:
${checklistText}

–£–ñ–ï –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø (–≤—Å–µ–≥–æ ${foundConditions.length}):
${foundConditions.join(', ')}

–í–µ—Ä–Ω–∏ JSON —Å 3-5 —Å–∞–º—ã–º–∏ –≤–∞–∂–Ω—ã–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
{
  "missingRequirements": [
    {
      "requirement": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
      "comment": "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏"
    }
  ]
}`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: missingPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 8000,
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", rawResponse.substring(0, 300));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π");
      return { missingRequirements: [] };
    }
    
    return extractJsonFromResponse(rawResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
      console.log("üîë –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π...");
      return await findMissingRequirements(contractText, checklistText, foundConditions, perspective, onProgress);
    }
    return { missingRequirements: [] };
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
function extractEntitiesFromAnalysis(contractParagraphs: ContractParagraph[]): Array<{
  id: string;
  text: string;
  entityType: '—Å—Ä–æ–∫' | '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å' | '–ø–µ–Ω—è' | '–Ω–µ—É—Å—Ç–æ–π–∫–∞' | '—Å—É–º–º–∞' | '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' | '–ø—Ä–æ—Ü–µ–Ω—Ç';
  value: string;
  context: string;
}> {
  const entities: Array<{
    id: string;
    text: string;
    entityType: '—Å—Ä–æ–∫' | '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å' | '–ø–µ–Ω—è' | '–Ω–µ—É—Å—Ç–æ–π–∫–∞' | '—Å—É–º–º–∞' | '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' | '–ø—Ä–æ—Ü–µ–Ω—Ç';
    value: string;
    context: string;
  }> = [];

  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ ${contractParagraphs.length} –∞–±–∑–∞—Ü–µ–≤`);

  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
  const patterns = {
    —Å—Ä–æ–∫: /(\d+)\s*(–¥–Ω|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω|—Ä–∞–±–æ—á|–º–µ—Å—è—Ü|–≥–æ–¥)/gi,
    –ø—Ä–æ—Ü–µ–Ω—Ç: /(\d+(?:[.,]\d+)?)\s*%|\d+(?:[.,]\d+)?\s*–ø—Ä–æ—Ü–µ–Ω—Ç/gi,
    —Å—É–º–º–∞: /(\d+(?:\s?\d{3})*(?:[.,]\d+)?)\s*(—Ä—É–±|—Ä—É–±–ª|–∫–æ–ø|—Ç—ã—Å|–º–ª–Ω|—Ç—ã—Å—è—á|–º–∏–ª–ª–∏–æ–Ω)/gi,
    –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: /(–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å|–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ|–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å|—à—Ç—Ä–∞—Ñ|—Å–∞–Ω–∫—Ü–∏–∏)/gi,
    –ø–µ–Ω—è: /(–ø–µ–Ω—è|–ø–µ–Ω–∏|–Ω–µ—É—Å—Ç–æ–π–∫–∞|—à—Ç—Ä–∞—Ñ)/gi
  };

  contractParagraphs.forEach(paragraph => {
    const text = paragraph.text.toLowerCase();
    
    // –ü–æ–∏—Å–∫ —Å—Ä–æ–∫–æ–≤
    let srokMatch;
    const srokPattern = /(\d+)\s*(–¥–Ω|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω|—Ä–∞–±–æ—á|–º–µ—Å—è—Ü|–≥–æ–¥)/gi;
    while ((srokMatch = srokPattern.exec(text)) !== null) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '—Å—Ä–æ–∫',
        value: srokMatch[0],
        context: paragraph.text.substring(Math.max(0, srokMatch.index! - 50), srokMatch.index! + srokMatch[0].length + 50)
      });
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    let percentMatch;
    const percentPattern = /(\d+(?:[.,]\d+)?)\s*%|\d+(?:[.,]\d+)?\s*–ø—Ä–æ—Ü–µ–Ω—Ç/gi;
    while ((percentMatch = percentPattern.exec(text)) !== null) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '–ø—Ä–æ—Ü–µ–Ω—Ç',
        value: percentMatch[0],
        context: paragraph.text.substring(Math.max(0, percentMatch.index! - 50), percentMatch.index! + percentMatch[0].length + 50)
      });
    }

    // –ü–æ–∏—Å–∫ —Å—É–º–º
    let sumMatch;
    const sumPattern = /(\d+(?:\s?\d{3})*(?:[.,]\d+)?)\s*(—Ä—É–±|—Ä—É–±–ª|–∫–æ–ø|—Ç—ã—Å|–º–ª–Ω|—Ç—ã—Å—è—á|–º–∏–ª–ª–∏–æ–Ω)/gi;
    while ((sumMatch = sumPattern.exec(text)) !== null) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '—Å—É–º–º–∞',
        value: sumMatch[0],
        context: paragraph.text.substring(Math.max(0, sumMatch.index! - 50), sumMatch.index! + sumMatch[0].length + 50)
      });
    }

    // –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ–Ω–∏
    if (patterns.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.test(text) || patterns.–ø–µ–Ω—è.test(text)) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
        value: text.match(patterns.–ø—Ä–æ—Ü–µ–Ω—Ç)?.[0] || text.match(patterns.—Å—É–º–º–∞)?.[0] || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        context: paragraph.text
      });
    }
  });

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const entitiesByType = entities.reduce((acc, entity) => {
    if (!acc[entity.entityType]) acc[entity.entityType] = 0;
    acc[entity.entityType]++;
    return acc;
  }, {} as Record<string, number>);

  console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º:`, entitiesByType);
  console.log(`üìà –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: ${entities.length}`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
  Object.keys(entitiesByType).forEach(type => {
    const exampleEntities = entities.filter(e => e.entityType === type).slice(0, 2);
    if (exampleEntities.length > 0) {
      console.log(`üí° –ü—Ä–∏–º–µ—Ä—ã —Å—É—â–Ω–æ—Å—Ç–µ–π —Ç–∏–ø–∞ "${type}":`, 
        exampleEntities.map(e => `${e.value} (${e.id})`)
      );
    }
  });

  return entities;
}

// –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
function findPotentialContradictions(entities: Array<{
  id: string;
  text: string;
  entityType: string;
  value: string;
  context: string;
}>): Array<{
  entity1: any;
  entity2: any;
  type: 'temporal' | 'financial' | 'quantitative' | 'legal';
}> {
  const potentialContradictions: Array<{
    entity1: any;
    entity2: any;
    type: 'temporal' | 'financial' | 'quantitative' | 'legal';
  }> = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É
  const entitiesByType = entities.reduce((acc, entity) => {
    if (!acc[entity.entityType]) acc[entity.entityType] = [];
    acc[entity.entityType].push(entity);
    return acc;
  }, {} as Record<string, any[]>);

  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º:', Object.keys(entitiesByType).map(type => `${type}: ${entitiesByType[type].length}`));

  // –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ —Å—Ä–æ–∫–∞—Ö
  if (entitiesByType.—Å—Ä–æ–∫ && entitiesByType.—Å—Ä–æ–∫.length > 1) {
    console.log(`üïê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${entitiesByType.—Å—Ä–æ–∫.length} —Å—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è`);
    for (let i = 0; i < entitiesByType.—Å—Ä–æ–∫.length; i++) {
      for (let j = i + 1; j < entitiesByType.—Å—Ä–æ–∫.length; j++) {
        const entity1 = entitiesByType.—Å—Ä–æ–∫[i];
        const entity2 = entitiesByType.—Å—Ä–æ–∫[j];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ—Ö–æ–∂–∏, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ
        if (entity1.id !== entity2.id && entity1.value !== entity2.value) {
          const context1Words = entity1.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
          const context2Words = entity2.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
          const commonWords = context1Words.filter((word: string) => 
            context2Words.includes(word) && !['—ç—Ç–æ–º', '—Ç–æ–≥–æ', '—ç—Ç–æ–≥–æ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ—Ç–æ—Ä—ã—Ö', '–º–æ–∂–µ—Ç', '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–º–æ–∂–µ—Ç', '–±—É–¥–µ—Ç'].includes(word)
          );
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
          if (commonWords.length >= 3 || 
              (commonWords.length >= 2 && (
                entity1.context.includes('–ø–æ—Å—Ç–∞–≤–∫–∞') && entity2.context.includes('–ø–æ—Å—Ç–∞–≤–∫–∞') ||
                entity1.context.includes('–ø–ª–∞—Ç–µ–∂') && entity2.context.includes('–ø–ª–∞—Ç–µ–∂') ||
                entity1.context.includes('–æ–ø–ª–∞—Ç–∞') && entity2.context.includes('–æ–ø–ª–∞—Ç–∞')
              ))) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: ${entity1.value} vs ${entity2.value}, –æ–±—â–∏—Ö —Å–ª–æ–≤: ${commonWords.length}`);
            potentialContradictions.push({
              entity1,
              entity2,
              type: 'temporal'
            });
          }
        }
      }
    }
  }

  // –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  if (entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç && entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length > 1) {
    console.log(`üí∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è`);
    for (let i = 0; i < entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length; i++) {
      for (let j = i + 1; j < entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length; j++) {
        const entity1 = entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç[i];
        const entity2 = entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç[j];
        
        if (entity1.id !== entity2.id && entity1.value !== entity2.value) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const num1 = parseFloat(entity1.value.replace(/[^\d.,]/g, '').replace(',', '.'));
          const num2 = parseFloat(entity2.value.replace(/[^\d.,]/g, '').replace(',', '.'));
          
          // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ—Ö–æ–∂–∏
          if (!isNaN(num1) && !isNaN(num2) && Math.abs(num1 - num2) > 0.1) {
            const context1Words = entity1.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
            const context2Words = entity2.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
            const commonWords = context1Words.filter((word: string) => 
              context2Words.includes(word) && !['—ç—Ç–æ–º', '—Ç–æ–≥–æ', '—ç—Ç–æ–≥–æ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ—Ç–æ—Ä—ã—Ö'].includes(word)
            );
            
            if (commonWords.length >= 2 || 
                (entity1.context.includes('–Ω–µ—É—Å—Ç–æ–π–∫–∞') && entity2.context.includes('–Ω–µ—É—Å—Ç–æ–π–∫–∞')) ||
                (entity1.context.includes('–ø–µ–Ω—è') && entity2.context.includes('–ø–µ–Ω—è')) ||
                (entity1.context.includes('—à—Ç—Ä–∞—Ñ') && entity2.context.includes('—à—Ç—Ä–∞—Ñ'))) {
              console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: ${entity1.value} vs ${entity2.value}`);
              potentialContradictions.push({
                entity1,
                entity2,
                type: 'quantitative'
              });
            }
          }
        }
      }
    }
  }

  // –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
  if (entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å && entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length > 1) {
    console.log(`‚öñÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length} –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è`);
    for (let i = 0; i < entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length; i++) {
      for (let j = i + 1; j < entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length; j++) {
        const entity1 = entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å[i];
        const entity2 = entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å[j];
        
        if (entity1.id !== entity2.id && entity1.value !== entity2.value && 
            entity1.value !== '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' && entity2.value !== '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') {
          console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: ${entity1.value} vs ${entity2.value}`);
          potentialContradictions.push({
            entity1,
            entity2,
            type: 'financial'
          });
        }
      }
    }
  }

  console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ${potentialContradictions.length}`);
  return potentialContradictions;
}

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π —á–µ—Ä–µ–∑ AI
async function verifyContradictionWithAI(
  potential: {
    entity1: any;
    entity2: any;
    type: 'temporal' | 'financial' | 'quantitative' | 'legal';
  },
  perspective: 'buyer' | 'supplier'
): Promise<any | null> {
  try {
    const keyToUse = keyPool.getNextKey();
    const genAI = new GoogleGenerativeAI(keyToUse);
    const model = genAI.getGenerativeModel({ 
      model: MODEL_NAME,
      systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è.`
    });

    const verificationPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–≤–∞ –ø—É–Ω–∫—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:

–ü–£–ù–ö–¢ 1: "${potential.entity1.text.substring(0, 500)}"
–ó–ù–ê–ß–ï–ù–ò–ï 1: ${potential.entity1.value}

–ü–£–ù–ö–¢ 2: "${potential.entity2.text.substring(0, 500)}"  
–ó–ù–ê–ß–ï–ù–ò–ï 2: ${potential.entity2.value}

–≠—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É? –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON:

{
  "isContradiction": true/false,
  "severity": "high"/"medium"/"low", 
  "explanation": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
  "recommendation": "–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
}`;

    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: verificationPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 2000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è: ${rawResponse.substring(0, 200)}`);
    
    const verification = extractJsonFromResponse(rawResponse);
    
    if (verification.isContradiction) {
      return {
        id: `contradiction_${potential.entity1.id}_${potential.entity2.id}`,
        type: potential.type,
        description: verification.explanation,
        conflictingParagraphs: {
          paragraph1: {
            text: potential.entity1.text,
            value: potential.entity1.value
          },
          paragraph2: {
            text: potential.entity2.text,
            value: potential.entity2.value
          }
        },
        severity: verification.severity,
        recommendation: verification.recommendation
      };
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:', error);
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ–º –∫–≤–æ—Ç—ã, –æ—Ç–º–µ—á–∞–µ–º –∫–ª—é—á
    if (error instanceof Error && error.message.includes('429')) {
      const keyToUse = keyPool.getNextKey();
      keyPool.markKeyAsExhausted(keyToUse);
    }
    
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è AI-–≤–µ—Ä—Å–∏—è)
async function findContradictions(
  allAnalysis: any[],
  paragraphs: Array<{ id: string; text: string }>,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  onProgress("–ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏...");
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É
  const analyzedSummary = allAnalysis
    .filter(item => item.category && item.category !== null)
    .map(item => {
      const paragraph = paragraphs.find(p => p.id === item.id);
      return {
        id: item.id,
        text: paragraph?.text?.substring(0, 200) + ((paragraph?.text && paragraph.text.length > 200) ? '...' : ''),
        category: item.category,
        comment: item.comment,
        recommendation: item.recommendation
      };
    });

  // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–∞–ª–æ, –Ω–µ –∏—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
  if (analyzedSummary.length < 3) {
    console.log("üîç –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
    return { contradictions: [] };
  }

  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const contradictionsPrompt = `–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã –ø—É–Ω–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è–º–æ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É.

–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–£–ù–ö–¢–´:
${JSON.stringify(analyzedSummary, null, 2)}

–ò—â–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤:
- –°—Ä–æ–∫–∞—Ö (—Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä)
- –°—É–º–º–∞—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à—Ç—Ä–∞—Ñ–æ–≤/–ø–µ–Ω–∏)
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–∫—Ç–æ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç)
- –£—Å–ª–æ–≤–∏—è—Ö —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö

–ï—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤. –ï—Å–ª–∏ –µ—Å—Ç—å - —É–∫–∞–∂–∏ –¥–æ 5 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö.

–í–µ—Ä–Ω–∏ JSON:
{
  "contradictions": [
    {
      "id": "contr_1",
      "type": "temporal",
      "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è",
      "conflictingParagraphs": {
        "paragraph1": {
          "text": "–ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–π –ø—É–Ω–∫—Ç (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)",
          "value": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞"
        },
        "paragraph2": {
          "text": "–í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–π –ø—É–Ω–∫—Ç (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)", 
          "value": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞"
        }
      },
      "severity": "high",
      "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é"
    }
  ]
}

–¢–∏–ø—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: "temporal" (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ), "financial" (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ), "quantitative" (–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ), "legal" (–ø—Ä–∞–≤–æ–≤—ã–µ)
–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏: "high", "medium", "low"`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: contradictionsPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 8000,
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π:", rawResponse.substring(0, 300));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
      return { contradictions: [] };
    }
    
    const parsedResult = extractJsonFromResponse(rawResponse);
    const contradictions = parsedResult.contradictions || [];
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ${contradictions.length}`);
    return { contradictions };
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
      console.log("üîë –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
    }
    return { contradictions: [] };
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏
async function findRightsImbalance(
  allAnalysis: any[],
  paragraphs: Array<{ id: string; text: string }>,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  console.log(`üîÑ –ù–ê–ß–ê–õ–û —Ñ—É–Ω–∫—Ü–∏–∏ findRightsImbalance: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ (–≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: ${allAnalysis.length})`);
  onProgress("–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ —Å—Ç–æ—Ä–æ–Ω...");
  
  console.log(`üìä DEBUG findRightsImbalance: –°–æ–±–∏—Ä–∞—é –ø—É–Ω–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤...`);
  
  // –°–æ–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è –ø—Ä–∞–≤ –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
  const rightsRelatedItems = allAnalysis
    .filter(item => item.category && ['risk', 'partial', 'checklist'].includes(item.category))
    .map(item => {
      const paragraph = paragraphs.find(p => p.id === item.id);
      return {
        id: item.id,
        text: paragraph?.text?.substring(0, 200) + ((paragraph?.text && paragraph.text.length > 200) ? '...' : ''),
        category: item.category,
        comment: item.comment?.substring(0, 150) || null
      };
    })
    .slice(0, 20); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤

  console.log(`üîç DEBUG findRightsImbalance: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤: ${rightsRelatedItems.length}`);

  if (rightsRelatedItems.length < 3) {
    console.log("üîç DEBUG findRightsImbalance: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤");
    return { rightsImbalance: [] };
  }

  console.log(`üìä DEBUG findRightsImbalance: –ü–æ–ª—É—á–∞—é API –∫–ª—é—á...`);
  const keyToUse = keyPool.getNextKey();
  console.log(`üìä DEBUG findRightsImbalance: –°–æ–∑–¥–∞—é –º–æ–¥–µ–ª—å Gemini...`);
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  console.log(`üìä DEBUG findRightsImbalance: –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`);
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  const rightsPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –î–ò–°–ë–ê–õ–ê–ù–° –ü–†–ê–í –º–µ–∂–¥—É –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –ø–æ—Å—Ç–∞–≤–∫–∏.

–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ï –ü–£–ù–ö–¢–´ –î–û–ì–û–í–û–†–ê:
${rightsRelatedItems.map(item => `- ${item.id}: ${item.text}${item.comment ? ` (–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${item.comment})` : ''}`).join('\n')}

–ù–∞–π–¥–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö:

1. **–ü–†–ê–í–ê –†–ê–°–¢–û–†–ñ–ï–ù–ò–Ø** (termination_rights):
   - –°–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –µ—Å—Ç—å —É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è?
   - –°–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –µ—Å—Ç—å —É –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞?
   - –ï—Å—Ç—å –ª–∏ –∞—Å–∏–º–º–µ—Ç—Ä–∏—è –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è?

2. **–ü–†–ê–í–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø** (modification_rights):
   - –ö—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã, —Å—Ä–æ–∫–∏, —É—Å–ª–æ–≤–∏—è?
   - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã?
   - –ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è?

3. **–ö–û–ù–¢–†–û–õ–¨–ù–´–ï –ü–†–ê–í–ê** (control_rights):
   - –ö—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞?
   - –ö—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º?
   - –ö—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è?

4. **–ü–†–ê–í–ê –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò** (liability_rights):
   - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
   - –ü—Ä–∞–≤–∞ –Ω–∞ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø–æ–¥—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤/–æ—Å–Ω–æ–≤–∞–Ω–∏–π —É –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.

–í–µ—Ä–Ω–∏ JSON:
{
  "rightsImbalance": [
    {
      "id": "imbalance_1",
      "type": "termination_rights",
      "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞",
      "buyerRights": 2,
      "supplierRights": 4,
      "severity": "high",
      "recommendation": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é –ø—Ä–∞–≤"
    }
  ]
}

–í–ê–ñ–ù–û: 
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π
- –ï—Å–ª–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
- –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –ø—Ä–∞–≤ —É –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
- Severity: "high" - –∫—Ä–∏—Ç–∏—á–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å, "medium" - –∑–∞–º–µ—Ç–Ω—ã–π, "low" - –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π`;

  try {
    console.log(`üìä DEBUG findRightsImbalance: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Gemini...`);
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: rightsPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 8000,
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    console.log(`üìä DEBUG findRightsImbalance: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini`);
    const rawResponse = result.response.text();
    console.log("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤:", rawResponse.substring(0, 300));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è DEBUG findRightsImbalance: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤");
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
      return { 
        rightsImbalance: [
          {
            id: "default_imbalance_1",
            type: "termination_rights",
            description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –ø—Ä–∞–≤–∞—Ö —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
            buyerRights: 1,
            supplierRights: 2,
            severity: "medium",
            recommendation: "–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π"
          }
        ]
      };
    }
    
    console.log(`üìä DEBUG findRightsImbalance: –ü–∞—Ä—Å—é –æ—Ç–≤–µ—Ç...`);
    const parsedResult = extractJsonFromResponse(rawResponse);
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—ä–µ–∫—Ç–∞, –∏ –º–∞—Å—Å–∏–≤–∞
    let rightsImbalance = [];
    if (Array.isArray(parsedResult)) {
      rightsImbalance = parsedResult;
    } else if (parsedResult && parsedResult.rightsImbalance) {
      rightsImbalance = parsedResult.rightsImbalance;
    }
    
    console.log(`üîç DEBUG findRightsImbalance: –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∞–≤: ${rightsImbalance.length}`);
    console.log(`‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï —Ñ—É–Ω–∫—Ü–∏–∏ findRightsImbalance: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤`);
    return { rightsImbalance };
    
  } catch (error) {
    console.error("‚ùå DEBUG findRightsImbalance: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
      console.log("üîë DEBUG findRightsImbalance: –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–Ω –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤");
    }
    console.log(`‚ùå –û–®–ò–ë–ö–ê –≤ —Ñ—É–Ω–∫—Ü–∏–∏ findRightsImbalance: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return { 
      rightsImbalance: [
        {
          id: "error_fallback_1",
          type: "control_rights", 
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏",
          buyerRights: 0,
          supplierRights: 0,
          severity: "low",
          recommendation: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏"
        }
      ]
    };
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏
function splitIntoSpans(text: string): Array<{ id: string; text: string }> {
  const lines = text.split(/\n/);
  const paragraphs: string[] = [];
  let currentParagraph = '';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
  const isNewSection = (line: string): boolean => {
    const trimmed = line.trim();
    // –ù–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (1., 2.1., etc.)
    if (/^\d+\.(\d+\.)*\s/.test(trimmed)) return true;
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if (/^[–ê-–Ø–Å\s]{3,}$/.test(trimmed) && trimmed.length < 100) return true;
    // –°—Ç–∞—Ç—å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
    if (/^(—Å—Ç–∞—Ç—å—è|—Ä–∞–∑–¥–µ–ª|–≥–ª–∞–≤–∞|–ø—É–Ω–∫—Ç)\s*\d+/i.test(trimmed)) return true;
    return false;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–±–∑–∞—Ü–∞
  const isImportantContent = (text: string): boolean => {
    const trimmed = text.trim();
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (trimmed.length < CHUNKING_CONFIG.MIN_CONTENT_LENGTH) return false;
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (/^[–ê-–Ø–Å\s]{3,}$/.test(trimmed)) return false;
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏
    if (/^[\d\s\.\-\/]+$/.test(trimmed)) return false;
    return true;
  };

  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (trimmedLine === '') {
      if (currentParagraph.trim() && isImportantContent(currentParagraph)) {
        paragraphs.push(currentParagraph.trim());
        currentParagraph = '';
      }
      continue;
    }

    // –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–±–∑–∞—Ü –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
    if (isNewSection(trimmedLine)) {
      if (currentParagraph.trim() && isImportantContent(currentParagraph)) {
        paragraphs.push(currentParagraph.trim());
      }
      currentParagraph = trimmedLine;
    } else {
      // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–∑–∞—Ü–∞
      if (currentParagraph) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª
        const needsSpace = !currentParagraph.endsWith(' ') && 
                          !trimmedLine.startsWith('(') && 
                          !currentParagraph.endsWith('(');
        currentParagraph += (needsSpace ? ' ' : '') + trimmedLine;
      } else {
        currentParagraph = trimmedLine;
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤
    if (currentParagraph.length > CHUNKING_CONFIG.MAX_PARAGRAPH_LENGTH) {
      // –ò—â–µ–º —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
      const sentences = currentParagraph.split(/[.!?]+/);
      if (sentences.length > 1) {
        const midPoint = Math.floor(sentences.length / 2);
        const firstPart = sentences.slice(0, midPoint).join('.') + '.';
        const secondPart = sentences.slice(midPoint).join('.').trim();
        
        if (firstPart.trim() && isImportantContent(firstPart)) {
          paragraphs.push(firstPart.trim());
        }
        currentParagraph = secondPart;
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
  if (currentParagraph.trim() && isImportantContent(currentParagraph)) {
    paragraphs.push(currentParagraph.trim());
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –Ω—É–º–µ—Ä—É–µ–º –∞–±–∑–∞—Ü—ã
  const filteredParagraphs = paragraphs
    .filter(p => isImportantContent(p))
    .map((paragraph, index) => ({
      id: `p${index + 1}`,
      text: paragraph,
    }));

  console.log(`üìù –î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–±–∏—Ç –Ω–∞ ${filteredParagraphs.length} —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤`);
  
  return filteredParagraphs;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
export async function analyzeContractWithGemini(
  contractText: string,
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier' = 'buyer',
  onProgress: (message: string) => void = () => {}
): Promise<{ contractParagraphs: ContractParagraph[], missingRequirements: ContractParagraph[], ambiguousConditions: ContractParagraph[], structuralAnalysis: any, contradictions: any[], rightsImbalance: any[] }> {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (${keyPool.getKeyCount()} API –∫–ª—é—á–µ–π)`);
  
  try {
    // –≠—Ç–∞–ø 1: –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ 15 –∞–±–∑–∞—Ü–µ–≤)
    onProgress("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏...");
    const paragraphs = splitIntoSpans(contractText);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –∞–±–∑–∞—Ü–∞–º (15 –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —á—É–Ω–∫)
    const chunks = createChunks(paragraphs, 15);
    
    console.log(`üìÑ –î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–±–∏—Ç –Ω–∞ ${paragraphs.length} –∞–±–∑–∞—Ü–µ–≤ –∏ ${chunks.length} —á–∞–Ω–∫–æ–≤`);
    console.log(`üìä –í —Å—Ä–µ–¥–Ω–µ–º ${Math.round(paragraphs.length / chunks.length)} –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —á–∞–Ω–∫`);
    console.log(`üîë –î–æ—Å—Ç—É–ø–Ω–æ API –∫–ª—é—á–µ–π: ${keyPool.getAvailableKeyCount()}/${keyPool.getKeyCount()}`);
    
    // –≠—Ç–∞–ø 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
    const chunkResults = await processChunksInParallel(chunks, checklistText, riskText, perspective, onProgress);
    
    // –≠—Ç–∞–ø 3: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const structuralResult = await performStructuralAnalysis(contractText, chunkResults, perspective, onProgress);
    
    // –≠—Ç–∞–ø 4: –°–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    const foundConditions: string[] = [];
    const allAnalysis: any[] = [];
    
    chunkResults.forEach(chunkResult => {
      if (chunkResult.analysis) {
        allAnalysis.push(...chunkResult.analysis);
        chunkResult.analysis.forEach((item: any) => {
          // –¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (checklist) —Å—á–∏—Ç–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏
          // –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (partial) –ù–ï —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏
          if (item.category === 'checklist') {
            foundConditions.push(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ: –∞–±–∑–∞—Ü ${item.id}`);
          }
        });
      }
    });
    
    // –≠—Ç–∞–ø 5: –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const missingResult = await findMissingRequirements(contractText, checklistText, foundConditions, perspective, onProgress);
    console.log(`‚úÖ –≠–¢–ê–ü 5 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ ${missingResult.missingRequirements?.length || 0} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
    
    // –≠—Ç–∞–ø 6: –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è AI-–≤–µ—Ä—Å–∏—è)
    console.log(`üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –≠–¢–ê–ü 6: –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π`);
    console.log(`üìä DEBUG –≠–¢–ê–ü 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∏—Å–∫—É –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π (–∞–Ω–∞–ª–∏–∑–æ–≤: ${allAnalysis.length})`);
    
    let contradictionsResult;
    try {
      console.log(`üìä DEBUG –≠–¢–ê–ü 6: –í—ã–∑—ã–≤–∞—é findContradictions...`);
      contradictionsResult = await findContradictions(allAnalysis, paragraphs, perspective, onProgress);
      console.log(`üìä DEBUG –≠–¢–ê–ü 6: findContradictions –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, contradictionsResult);
      console.log(`‚úÖ –≠–¢–ê–ü 6 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ ${contradictionsResult.contradictions?.length || 0} –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π`);
    } catch (error) {
      console.error("‚ùå –û–®–ò–ë–ö–ê –í –≠–¢–ê–ü–ï 6:", error);
      contradictionsResult = { contradictions: [] };
    }
    
    // –≠—Ç–∞–ø 7: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏
    console.log(`üîÑ –ì–û–¢–û–í–ò–ú–°–Ø –ö –≠–¢–ê–ü–£ 7: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ (–∞–Ω–∞–ª–∏–∑–æ–≤: ${allAnalysis.length}, –∞–±–∑–∞—Ü–µ–≤: ${paragraphs.length})`);
    console.log(`üìä DEBUG –≠–¢–ê–ü 7: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤`);
    
    let rightsImbalanceResult;
    try {
      console.log(`üìä DEBUG –≠–¢–ê–ü 7: –í—ã–∑—ã–≤–∞—é findRightsImbalance...`);
      rightsImbalanceResult = await findRightsImbalance(allAnalysis, paragraphs, perspective, onProgress);
      console.log(`üìä DEBUG –≠–¢–ê–ü 7: findRightsImbalance –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, rightsImbalanceResult);
      console.log(`‚úÖ –≠–¢–ê–ü 7 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∞–≤: ${rightsImbalanceResult.rightsImbalance?.length || 0}`);
    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –≠–¢–ê–ü–ï 7:", error);
      rightsImbalanceResult = { rightsImbalance: [] };
    }
    
    console.log(`üîÑ –ü–ï–†–ï–•–û–î–ò–ú –ö –≠–¢–ê–ü–£ 8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    
    // –≠—Ç–∞–ø 8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    onProgress("–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
    
    const contractParagraphs: ContractParagraph[] = paragraphs.map(paragraph => {
      const analysis = allAnalysis.find((item: any) => item.id === paragraph.id);
      
      return {
        id: paragraph.id,
        text: paragraph.text, // –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞
        category: analysis?.category || null,
        comment: analysis?.comment || null,
        recommendation: analysis?.recommendation || null,
        improvedClause: analysis?.improvedClause || null,
        legalRisk: analysis?.legalRisk || null,
        isExpanded: false,
      };
    });

    const missingRequirements: ContractParagraph[] = (missingResult.missingRequirements || []).map((req: any, index: number) => ({
      id: `missing_${index + 1}`,
      text: req.requirement || "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ",
      comment: req.comment || null,
      recommendation: req.recommendation || null,
      category: 'missing' as const,
    }));

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    const ambiguousConditions: ContractParagraph[] = contractParagraphs.filter(p => p.category === 'ambiguous');

    const finalStructuralAnalysis = structuralResult.structuralAnalysis || {
      overallAssessment: "–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω",
      keyRisks: [],
      structureComments: "",
      legalCompliance: "",
      recommendations: []
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const stats = {
      totalParagraphs: contractParagraphs.length,
      checklist: contractParagraphs.filter(p => p.category === 'checklist').length,
      partial: contractParagraphs.filter(p => p.category === 'partial').length,
      risk: contractParagraphs.filter(p => p.category === 'risk').length,
      ambiguous: ambiguousConditions.length,
      deemed_acceptance: contractParagraphs.filter(p => p.category === 'deemed_acceptance').length,
      external_refs: contractParagraphs.filter(p => p.category === 'external_refs').length,
      missing: missingRequirements.length,
      contradictions: contradictionsResult.contradictions?.length || 0,
      rightsImbalance: rightsImbalanceResult.rightsImbalance?.length || 0,
    };

    console.log("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", stats);
    onProgress("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");

    return {
      contractParagraphs,
      missingRequirements,
      ambiguousConditions,
      structuralAnalysis: finalStructuralAnalysis,
      contradictions: contradictionsResult.contradictions || [],
      rightsImbalance: rightsImbalanceResult.rightsImbalance || []
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞:", error);
    
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    if (errorMessage?.includes('Candidate was blocked')) {
      throw new Error('–ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.');
    }
    
    if (errorMessage?.includes('–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã')) {
      throw new Error('–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏.');
    }
    
    if (errorMessage?.includes('Resource has been exhausted')) {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏.');
    }
    
    if (errorMessage?.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å') || errorMessage?.includes('Failed to parse')) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞: ${errorMessage}`);
  }
}