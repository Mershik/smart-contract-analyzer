import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import { type ContractParagraph } from "@shared/schema";

const MODEL_NAME = 'gemini-2.5-flash';

// –ü—É–ª API –∫–ª—é—á–µ–π —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º round-robin
class ApiKeyPool {
  private keys: string[] = [];
  private currentIndex = 0;
  private keyUsageCount: Map<string, number> = new Map();
  private exhaustedKeys: Set<string> = new Set();

  constructor() {
    const apiKeyEnv = import.meta.env.VITE_API_KEY;
    if (!apiKeyEnv) {
      throw new Error("VITE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    this.keys = apiKeyEnv.split(',').map((key: string) => key.trim()).filter((key: string) => key.length > 0);
    
    if (this.keys.length === 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö API –∫–ª—é—á–µ–π");
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.keys.forEach(key => {
      this.keyUsageCount.set(key, 0);
    });
    
    console.log(`üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª –∏–∑ ${this.keys.length} API –∫–ª—é—á–µ–π`);
  }

  getNextKey(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
    const availableKeys = this.keys.filter(key => !this.exhaustedKeys.has(key));
    
    if (availableKeys.length === 0) {
      throw new Error("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã");
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª—é—á–∞
    let attempts = 0;
    while (attempts < this.keys.length) {
      const key = this.keys[this.currentIndex];
      this.currentIndex = (this.currentIndex + 1) % this.keys.length;
      
      if (!this.exhaustedKeys.has(key)) {
        const currentCount = this.keyUsageCount.get(key) || 0;
        this.keyUsageCount.set(key, currentCount + 1);
        console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á ${key.substring(0, 10)}... (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${currentCount + 1} —Ä–∞–∑, –¥–æ—Å—Ç—É–ø–Ω–æ ${this.getAvailableKeyCount()}/${this.getKeyCount()})`);
        return key;
      }
      
      attempts++;
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π API –∫–ª—é—á");
  }

  markKeyAsExhausted(key: string): void {
    this.exhaustedKeys.add(key);
    console.warn(`‚ö†Ô∏è –ö–ª—é—á ${key.substring(0, 10)}... –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π`);
  }

  getKeyCount(): number {
    return this.keys.length;
  }

  getAvailableKeyCount(): number {
    return this.keys.length - this.exhaustedKeys.size;
  }

  getKeyUsageCount(key: string): number {
    return this.keyUsageCount.get(key) || 0;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –∫–ª—é—á–µ–π
const keyPool = new ApiKeyPool();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ "–≥—Ä—è–∑–Ω–æ–≥–æ" –æ—Ç–≤–µ—Ç–∞
function extractJsonFromResponse(rawResponse: string): any {
  console.log("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:", rawResponse.substring(0, 200));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  if (!rawResponse || rawResponse.trim().length === 0) {
    console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
    return {
      chunkId: "unknown",
      analysis: []
    };
  }
  
  let cleanedResponse = rawResponse.trim();
  
  // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
  if (cleanedResponse.includes('```json')) {
    const jsonMatch = cleanedResponse.match(/```json\s*([\s\S]*?)\s*```/);
    if (jsonMatch) {
      cleanedResponse = jsonMatch[1].trim();
    }
  } else if (cleanedResponse.includes('```')) {
    const codeMatch = cleanedResponse.match(/```\s*([\s\S]*?)\s*```/);
    if (codeMatch) {
      cleanedResponse = codeMatch[1].trim();
    }
  }
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  cleanedResponse = cleanedResponse
    .replace(/\t/g, ' ')
    .replace(/\u00A0/g, ' ')
    .replace(/\u2028/g, ' ')
    .replace(/\u2029/g, ' ')
    // eslint-disable-next-line no-control-regex
    .replace(/[\x00-\x1F\x7F-\x9F]/g, ' ');
  
  // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
  try {
    return JSON.parse(cleanedResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
    console.log("üìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π:", rawResponse.length);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
    let repairedJson = cleanedResponse;
    
    // –ï—Å–ª–∏ JSON –æ–±—Ä–µ–∑–∞–Ω –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –µ—ë
    if (repairedJson.includes('"') && !repairedJson.endsWith('"')) {
      const lastQuoteIndex = repairedJson.lastIndexOf('"');
      const afterLastQuote = repairedJson.substring(lastQuoteIndex + 1);
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–≤—ã—á–∫–∏ –Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
      if (!afterLastQuote.includes('"') && !afterLastQuote.includes('}')) {
        repairedJson = repairedJson.substring(0, lastQuoteIndex + 1) + '"';
        console.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É");
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    let openBrackets = 0;
    let openBraces = 0;
    
    for (let i = 0; i < repairedJson.length; i++) {
      if (repairedJson[i] === '{') openBraces++;
      else if (repairedJson[i] === '}') openBraces--;
      else if (repairedJson[i] === '[') openBrackets++;
      else if (repairedJson[i] === ']') openBrackets--;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    while (openBrackets > 0) {
      repairedJson += ']';
      openBrackets--;
    }
    while (openBraces > 0) {
      repairedJson += '}';
      openBraces--;
    }
    
    // –£–±–∏—Ä–∞–µ–º trailing commas –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
    repairedJson = repairedJson
      .replace(/,\s*}/g, '}')
      .replace(/,\s*]/g, ']');
    
    console.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON:", repairedJson.substring(0, 300));
    
    try {
      return JSON.parse(repairedJson);
    } catch (secondError) {
      console.error("‚ùå –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:", secondError);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON
      const jsonMatches = rawResponse.match(/{[^}]*"chunkId"[^}]*}/g);
      if (jsonMatches && jsonMatches.length > 0) {
        console.log("üîç –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π JSON —Å chunkId");
        for (const jsonMatch of jsonMatches) {
          try {
            const partial = JSON.parse(jsonMatch + ', "analysis": []}');
            return partial;
          } catch (e) {
            continue;
          }
        }
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.warn("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞");
      return {
        chunkId: "failed",
        analysis: []
      };
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ 8000 —Ç–æ–∫–µ–Ω–æ–≤
function createChunks(paragraphs: Array<{ id: string; text: string }>, chunkSize: number = 15): Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }> {
  const chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }> = [];
  
  for (let i = 0; i < paragraphs.length; i += chunkSize) {
    const chunkParagraphs = paragraphs.slice(i, i + chunkSize);
    chunks.push({
      id: `chunk_${Math.floor(i / chunkSize) + 1}`,
      paragraphs: chunkParagraphs
    });
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} –±–æ–ª—å—à–∏—Ö —á–∞–Ω–∫–æ–≤ –ø–æ ${chunkSize} –∞–±–∑–∞—Ü–µ–≤`);
  return chunks;
}

// –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429
async function analyzeChunk(
  chunk: { id: string; paragraphs: Array<{ id: string; text: string }> },
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier'
): Promise<any> {
  const maxRetries = 3;
  let lastError: Error | null = null;
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const keyToUse = keyPool.getNextKey();
    
    try {
      const genAI = new GoogleGenerativeAI(keyToUse);
      const model = genAI.getGenerativeModel({ 
        model: MODEL_NAME,
        systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
      });

      const perspectiveContext = perspective === 'buyer'
        ? { role: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è', beneficiary: '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' }
        : { role: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞', beneficiary: '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' };

      const chunkPrompt = `–ê–Ω–∞–ª–∏–∑ –¥–ª—è ${perspectiveContext.role}. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
"checklist" - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)
"partial" - —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
"risk" - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∏—Å–∫–∏ –¥–ª—è ${perspectiveContext.beneficiary} (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)  
"ambiguous" - –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ("—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ", "–ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é", "–∏–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
null - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—à—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –∞–±–∑–∞—Ü–µ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏, —Å—É–º–º—ã, —É—Å–ª–æ–≤–∏—è), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏! –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–†–û–¢–ò–í–û–†–ï–ß–ò–ï: –ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω —Å—Ä–æ–∫ 10 –¥–Ω–µ–π, –Ω–æ –≤ –ø.5.2 —É–∫–∞–∑–∞–Ω–æ 5 –¥–Ω–µ–π –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"

–ê–±–∑–∞—Ü—ã: ${JSON.stringify(chunk.paragraphs)}

JSON:
{
  "chunkId": "${chunk.id}",
  "analysis": [
    {
      "id": "p1", 
      "category": "checklist",
      "comment": null,
      "recommendation": null
    },
    {
      "id": "p2", 
      "category": "risk",
      "comment": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏—Å–∫–∞",
      "recommendation": "–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
    }
  ]
}`;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: chunkPrompt }] }],
        generationConfig: {
          responseMimeType: "application/json",
          temperature: 0.1,
          maxOutputTokens: 8000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç API
          topP: 0.95,
          topK: 64,
        },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
        ],
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      const finishReason = result.response?.candidates?.[0]?.finishReason;
      if (finishReason && finishReason !== 'STOP') {
        console.warn(`‚ö†Ô∏è ${chunk.id}: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - ${finishReason}`);
        
        if (finishReason === 'MAX_TOKENS') {
          console.warn(`‚ö†Ô∏è ${chunk.id}: –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤`);
        }
      }

      const rawResponse = result.response.text();
      console.log(`üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è ${chunk.id}:`, rawResponse.substring(0, 300));
      
      return extractJsonFromResponse(rawResponse);
      
    } catch (error: any) {
      lastError = error;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π 429 (–∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞)
      if (error.message && error.message.includes('429') && error.message.includes('Resource has been exhausted')) {
        console.warn(`‚ö†Ô∏è ${chunk.id}: –ö–ª—é—á ${keyToUse.substring(0, 10)}... –∏—Å—á–µ—Ä–ø–∞–ª –∫–≤–æ—Ç—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π`);
        keyPool.markKeyAsExhausted(keyToUse);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (keyPool.getAvailableKeyCount() > 0) {
          console.log(`üîÑ ${chunk.id}: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          continue;
        } else {
          console.error(`‚ùå ${chunk.id}: –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–≤–æ—Ç—ã`);
          throw error;
        }
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      console.warn(`‚ö†Ô∏è ${chunk.id}: –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries}):`, error.message);
      if (attempt < maxRetries - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1))); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      }
    }
  }
  
  throw lastError || new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞–Ω–∫ ${chunk.id} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ –ø–æ 4 –∑–∞ —Ä–∞–∑
async function processChunksSequentially(
  chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }>,
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any[]> {
  const results: any[] = [];
  
  console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${chunks.length} –±–æ–ª—å—à–∏—Ö —á–∞–Ω–∫–æ–≤`);
  
  for (let i = 0; i < chunks.length; i++) {
    const chunk = chunks[i];
    const chunkNumber = i + 1;
    
    onProgress(`–ê–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–∞ ${chunkNumber} –∏–∑ ${chunks.length} (${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤)`);
    
    try {
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${chunkNumber}: ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤`);
      const chunkResult: any = await analyzeChunk(chunk, checklistText, riskText, perspective);
      results.push(chunkResult);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      if (i < chunks.length - 1) {
        const availableKeys = keyPool.getAvailableKeyCount();
        const delay = availableKeys > 8 ? 1000 : availableKeys > 4 ? 2000 : 3000;
        console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ ${delay}ms –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: ${availableKeys})`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞–Ω–∫–µ ${chunkNumber}:`, error);
      throw error;
    }
  }
  
  return results;
}

// –°–≤–æ–¥–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
async function performStructuralAnalysis(
  contractText: string,
  chunkResults: any[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  onProgress("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞...");
  
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const structuralPrompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ê–ë–ó–ê–¶–ï–í:
${JSON.stringify(chunkResults, null, 2)}

–í–µ—Ä–Ω–∏ JSON —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π:
{
  "structuralAnalysis": {
    "overallAssessment": "–ö—Ä–∞—Ç–∫–∞—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    "keyRisks": ["–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ 1", "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ 2"],
    "structureComments": "–ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
    "legalCompliance": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
    "recommendations": ["–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
  }
}`;

  const result = await model.generateContent({
    contents: [{ role: "user", parts: [{ text: structuralPrompt }] }],
    generationConfig: {
      responseMimeType: "application/json",
      temperature: 0.1,
      maxOutputTokens: 8000,
      topP: 0.95,
      topK: 64,
    },
    safetySettings: [
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
      },
    ],
  });

  const rawResponse = result.response.text();
  console.log("üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", rawResponse.substring(0, 300));
  
  return extractJsonFromResponse(rawResponse);
}

// –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async function findMissingRequirements(
  contractText: string,
  checklistText: string,
  foundConditions: string[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  onProgress("–ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...");
  
  const keyToUse = keyPool.getNextKey();
  console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á ${keyToUse.substring(0, 10)}... (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${keyPool.getKeyUsageCount(keyToUse)} —Ä–∞–∑, –¥–æ—Å—Ç—É–ø–Ω–æ ${keyPool.getAvailableKeyCount()}/${keyPool.getKeyCount()})`);
  
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const missingPrompt = `–ù–∞–π–¥–∏ 3-5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Å—Ä–∞–≤–Ω–∏–≤ —á–µ–∫-–ª–∏—Å—Ç —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.

–ü–û–õ–ù–´–ô –ß–ï–ö-–õ–ò–°–¢:
${checklistText}

–£–ñ–ï –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø (–≤—Å–µ–≥–æ ${foundConditions.length}):
${foundConditions.join(', ')}

–í–µ—Ä–Ω–∏ JSON —Å 3-5 —Å–∞–º—ã–º–∏ –≤–∞–∂–Ω—ã–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
{
  "missingRequirements": [
    {
      "requirement": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
      "comment": "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏"
    }
  ]
}`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: missingPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 8000,
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", rawResponse.substring(0, 300));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π");
      return { missingRequirements: [] };
    }
    
    return extractJsonFromResponse(rawResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
      console.log("üîë –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π...");
      return await findMissingRequirements(contractText, checklistText, foundConditions, perspective, onProgress);
    }
    return { missingRequirements: [] };
  }
}



// –†–∞–∑–±–∏–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã
function splitIntoSpans(text: string): Array<{ id: string; text: string }> {
  const lines = text.split(/\n/);
  const paragraphs: string[] = [];
  let currentParagraph = '';

  for (const line of lines) {
    const trimmedLine = line.trim();
    if (trimmedLine === '') {
      if (currentParagraph.trim()) {
        paragraphs.push(currentParagraph.trim());
        currentParagraph = '';
      }
    } else if (/^\d+\./.test(trimmedLine) || /^\d+\.\d+\./.test(trimmedLine)) {
      if (currentParagraph.trim()) {
        paragraphs.push(currentParagraph.trim());
      }
      currentParagraph = trimmedLine;
    } else {
      currentParagraph += (currentParagraph ? ' ' : '') + trimmedLine;
    }
  }
  if (currentParagraph.trim()) {
    paragraphs.push(currentParagraph.trim());
  }
  return paragraphs
    .filter(p => p.length > 10)
    .map((paragraph, index) => ({
      id: `p${index + 1}`,
      text: paragraph,
    }));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
export async function analyzeContractWithGemini(
  contractText: string,
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier' = 'buyer',
  onProgress: (message: string) => void = () => {}
): Promise<{ contractParagraphs: ContractParagraph[], missingRequirements: ContractParagraph[], ambiguousConditions: ContractParagraph[], structuralAnalysis: any, contradictions: any[] }> {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (${keyPool.getKeyCount()} API –∫–ª—é—á–µ–π)`);
  
  try {
    // –≠—Ç–∞–ø 1: –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤
    onProgress("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
    const paragraphs = splitIntoSpans(contractText);
    const chunks = createChunks(paragraphs, 15); // –ë–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –ª–∏–º–∏—Ç–æ–≤
    
    console.log(`üìÑ –î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–±–∏—Ç –Ω–∞ ${paragraphs.length} –∞–±–∑–∞—Ü–µ–≤ –∏ ${chunks.length} —á–∞–Ω–∫–æ–≤`);
    console.log(`üîë –î–æ—Å—Ç—É–ø–Ω–æ API –∫–ª—é—á–µ–π: ${keyPool.getAvailableKeyCount()}/${keyPool.getKeyCount()}`);
    
    // –≠—Ç–∞–ø 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —á–∞–Ω–∫–æ–≤
    const chunkResults = await processChunksSequentially(chunks, checklistText, riskText, perspective, onProgress);
    
    // –≠—Ç–∞–ø 3: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const structuralResult = await performStructuralAnalysis(contractText, chunkResults, perspective, onProgress);
    
    // –≠—Ç–∞–ø 4: –°–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    const foundConditions: string[] = [];
    const allAnalysis: any[] = [];
    
    chunkResults.forEach(chunkResult => {
      if (chunkResult.analysis) {
        allAnalysis.push(...chunkResult.analysis);
        chunkResult.analysis.forEach((item: any) => {
          // –¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (checklist) —Å—á–∏—Ç–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏
          // –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (partial) –ù–ï —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏
          if (item.category === 'checklist') {
            foundConditions.push(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ: –∞–±–∑–∞—Ü ${item.id}`);
          }
        });
      }
    });
    
    // –≠—Ç–∞–ø 5: –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const missingResult = await findMissingRequirements(contractText, checklistText, foundConditions, perspective, onProgress);
    
    // –≠—Ç–∞–ø 6: –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
    onProgress("–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
    
    const contractParagraphs: ContractParagraph[] = paragraphs.map(paragraph => {
      const analysis = allAnalysis.find((item: any) => item.id === paragraph.id);
      
      return {
        id: paragraph.id,
        text: paragraph.text, // –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞
        category: analysis?.category || null,
        comment: analysis?.comment || null,
        recommendation: analysis?.recommendation || null,
        improvedClause: analysis?.improvedClause || null,
        legalRisk: analysis?.legalRisk || null,
        isExpanded: false,
      };
    });

    const missingRequirements: ContractParagraph[] = (missingResult.missingRequirements || []).map((req: any, index: number) => ({
      id: `missing_${index + 1}`,
      text: req.requirement || "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ",
      comment: req.comment || null,
      recommendation: req.recommendation || null,
      category: 'missing' as const,
    }));

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    const ambiguousConditions: ContractParagraph[] = contractParagraphs.filter(p => p.category === 'ambiguous');

    const finalStructuralAnalysis = structuralResult.structuralAnalysis || {
      overallAssessment: "–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω",
      keyRisks: [],
      structureComments: "",
      legalCompliance: "",
      recommendations: []
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const stats = {
      totalParagraphs: contractParagraphs.length,
      checklist: contractParagraphs.filter(p => p.category === 'checklist').length,
      partial: contractParagraphs.filter(p => p.category === 'partial').length,
      risk: contractParagraphs.filter(p => p.category === 'risk').length,
      ambiguous: ambiguousConditions.length,
      missing: missingRequirements.length,
    };

    console.log("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", stats);
    onProgress("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");

    return {
      contractParagraphs,
      missingRequirements,
      ambiguousConditions,
      structuralAnalysis: finalStructuralAnalysis,
      contradictions: []
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞:", error);
    
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    if (errorMessage?.includes('Candidate was blocked')) {
      throw new Error('–ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.');
    }
    
    if (errorMessage?.includes('–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã')) {
      throw new Error('–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏.');
    }
    
    if (errorMessage?.includes('Resource has been exhausted')) {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏.');
    }
    
    if (errorMessage?.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å') || errorMessage?.includes('Failed to parse')) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞: ${errorMessage}`);
  }
}