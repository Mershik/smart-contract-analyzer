import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import { type ContractParagraph } from "@shared/schema";

const MODEL_NAME = 'gemini-2.5-flash';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏
const CHUNKING_CONFIG = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —á–∞–Ω–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
  MAX_TOKENS_PER_CHUNK: 600, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 8000 –¥–æ 600 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è MAX_TOKENS
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á—É–Ω–∫–∞–º–∏
  OVERLAP_SENTENCES: 2, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1 –¥–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∞–±–∑–∞—Ü–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
  MAX_PARAGRAPH_LENGTH: 1500,
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  MIN_CONTENT_LENGTH: 20,
};

// –ü—É–ª API –∫–ª—é—á–µ–π —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º round-robin
class ApiKeyPool {
  private keys: string[] = [];
  private currentIndex = 0;
  private keyUsageCount: Map<string, number> = new Map();
  private exhaustedKeys: Set<string> = new Set();

  constructor() {
    const apiKeyEnv = import.meta.env.VITE_API_KEY;
    if (!apiKeyEnv) {
      throw new Error("VITE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    this.keys = apiKeyEnv.split(',').map((key: string) => key.trim()).filter((key: string) => key.length > 0);
    
    if (this.keys.length === 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö API –∫–ª—é—á–µ–π");
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.keys.forEach(key => {
      this.keyUsageCount.set(key, 0);
    });
    
    console.log(`üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª –∏–∑ ${this.keys.length} API –∫–ª—é—á–µ–π`);
  }

  getNextKey(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
    const availableKeys = this.keys.filter(key => !this.exhaustedKeys.has(key));
    
    if (availableKeys.length === 0) {
      throw new Error("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã");
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª—é—á–∞
    let attempts = 0;
    while (attempts < this.keys.length) {
      const key = this.keys[this.currentIndex];
      this.currentIndex = (this.currentIndex + 1) % this.keys.length;
      
      if (!this.exhaustedKeys.has(key)) {
        const currentCount = this.keyUsageCount.get(key) || 0;
        this.keyUsageCount.set(key, currentCount + 1);
        console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á ${key.substring(0, 10)}... (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${currentCount + 1} —Ä–∞–∑, –¥–æ—Å—Ç—É–ø–Ω–æ ${this.getAvailableKeyCount()}/${this.getKeyCount()})`);
        return key;
      }
      
      attempts++;
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π API –∫–ª—é—á");
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  private estimateTokens(text: string): number {
    // –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞
    // –≠—Ç–æ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, —á–µ–º –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
    const AVERAGE_CHARS_PER_TOKEN = 4;
    return Math.ceil(text.length / AVERAGE_CHARS_PER_TOKEN);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  logTokenUsage(operation: string, inputText: string, outputText: string = ''): void {
    const inputTokens = this.estimateTokens(inputText);
    const outputTokens = this.estimateTokens(outputText);
    const totalTokens = inputTokens + outputTokens;
    
    console.log(`üìä –¢–û–ö–ï–ù–´ [${operation}]:`, {
      input: inputTokens,
      output: outputTokens,
      total: totalTokens,
      inputLength: inputText.length,
      outputLength: outputText.length
    });
  }

  markKeyAsExhausted(key: string): void {
    this.exhaustedKeys.add(key);
    console.warn(`‚ö†Ô∏è –ö–ª—é—á ${key.substring(0, 10)}... –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π`);
  }

  getKeyCount(): number {
    return this.keys.length;
  }

  getAvailableKeyCount(): number {
    return this.keys.length - this.exhaustedKeys.size;
  }

  getKeyUsageCount(key: string): number {
    return this.keyUsageCount.get(key) || 0;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –∫–ª—é—á–µ–π
const keyPool = new ApiKeyPool();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ "–≥—Ä—è–∑–Ω–æ–≥–æ" –æ—Ç–≤–µ—Ç–∞
function extractJsonFromResponse(rawResponse: string): any {
  console.log("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:", rawResponse.substring(0, 200));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  if (!rawResponse || rawResponse.trim().length === 0) {
    console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
    return {
      chunkId: "unknown",
      analysis: []
    };
  }
  
  let cleanedResponse = rawResponse.trim();
  
  // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
  if (cleanedResponse.includes('```json')) {
    const jsonMatch = cleanedResponse.match(/```json\s*([\s\S]*?)\s*```/);
    if (jsonMatch) {
      cleanedResponse = jsonMatch[1].trim();
    }
  } else if (cleanedResponse.includes('```')) {
    const codeMatch = cleanedResponse.match(/```\s*([\s\S]*?)\s*```/);
    if (codeMatch) {
      cleanedResponse = codeMatch[1].trim();
    }
  }
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  cleanedResponse = cleanedResponse
    .replace(/\t/g, ' ')
    .replace(/\u00A0/g, ' ')
    .replace(/\u2028/g, ' ')
    .replace(/\u2029/g, ' ')
    // eslint-disable-next-line no-control-regex
    .replace(/[\x00-\x1F\x7F-\x9F]/g, ' ');
  
  // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
  try {
    return JSON.parse(cleanedResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
    console.log("üìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π:", rawResponse.length);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
    let repairedJson = cleanedResponse;
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if (repairedJson.includes('"')) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏
      let quoteCount = 0;
      let lastQuoteIndex = -1;
      
      for (let i = 0; i < repairedJson.length; i++) {
        if (repairedJson[i] === '"' && (i === 0 || repairedJson[i-1] !== '\\')) {
          quoteCount++;
          lastQuoteIndex = i;
        }
      }
      
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫ –Ω–µ—á–µ—Ç–Ω–æ–µ, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
      if (quoteCount % 2 !== 0) {
        // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–≤—ã—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é
        repairedJson = repairedJson.substring(0, lastQuoteIndex + 1) + '"';
        console.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É");
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    let openBrackets = 0;
    let openBraces = 0;
    
    for (let i = 0; i < repairedJson.length; i++) {
      if (repairedJson[i] === '{') openBraces++;
      else if (repairedJson[i] === '}') openBraces--;
      else if (repairedJson[i] === '[') openBrackets++;
      else if (repairedJson[i] === ']') openBrackets--;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    while (openBrackets > 0) {
      repairedJson += ']';
      openBrackets--;
    }
    while (openBraces > 0) {
      repairedJson += '}';
      openBraces--;
    }
    
    // –£–±–∏—Ä–∞–µ–º trailing commas –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
    repairedJson = repairedJson
      .replace(/,\s*}/g, '}')
      .replace(/,\s*]/g, ']');
    
    console.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON:", repairedJson.substring(0, 300));
    
    try {
      return JSON.parse(repairedJson);
    } catch (secondError) {
      console.error("‚ùå –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:", secondError);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
      if (rawResponse.includes('isContradiction')) {
        console.log("üîç –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
        const fallbackResult = {
          isContradiction: false,
          severity: "low",
          explanation: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ",
          recommendation: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å isContradiction
        const contradictionMatch = rawResponse.match(/"isContradiction":\s*(true|false)/);
        if (contradictionMatch) {
          fallbackResult.isContradiction = contradictionMatch[1] === 'true';
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å severity
        const severityMatch = rawResponse.match(/"severity":\s*"(high|medium|low)"/);
        if (severityMatch) {
          fallbackResult.severity = severityMatch[1] as "high" | "medium" | "low";
        }
        
        return fallbackResult;
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
      if (rawResponse.includes('contradictions')) {
        console.log("üîç –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ
        const contradictionMatch = rawResponse.match(/"id":\s*"contr_\d+"/);
        if (contradictionMatch) {
          console.log("üîç –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤");
          return { contradictions: [] };
        }
      }
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞–Ω–∫–æ–≤
      if (rawResponse.includes('"chunkId"') && rawResponse.includes('"analysis"')) {
        console.log("üîß –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON –∞–Ω–∞–ª–∏–∑–∞ —á–∞–Ω–∫–∞");
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º chunkId
        const chunkIdMatch = rawResponse.match(/"chunkId":\s*"([^"]+)"/);
        const chunkId = chunkIdMatch ? chunkIdMatch[1] : "unknown";
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        const analysisObjects: any[] = [];
        
        // –ò—â–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        const analysisPattern = /{[^}]*"id":\s*"[^"]+",\s*"category":\s*"[^"]*"[^}]*}/g;
        let match;
        while ((match = analysisPattern.exec(rawResponse)) !== null) {
          try {
            const analysisObj = JSON.parse(match[0]);
            analysisObjects.push(analysisObj);
            console.log(`üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞: ${analysisObj.id}`);
          } catch (e) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (analysisObjects.length > 0) {
          console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${analysisObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${chunkId}`);
          return {
            chunkId: chunkId,
            analysis: analysisObjects
          };
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã ID –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const simpleAnalysisPattern = /"id":\s*"([^"]+)",\s*"category":\s*"([^"]*)"/g;
        const simpleObjects: any[] = [];
        
        while ((match = simpleAnalysisPattern.exec(rawResponse)) !== null) {
          simpleObjects.push({
            id: match[1],
            category: match[2] || null,
            comment: null,
            recommendation: null
          });
        }
        
        if (simpleObjects.length > 0) {
          console.log(`üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${simpleObjects.length} —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞`);
          return {
            chunkId: chunkId,
            analysis: simpleObjects
          };
        }
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const jsonMatches = rawResponse.match(/{[^}]*"chunkId"[^}]*}/g);
      if (jsonMatches && jsonMatches.length > 0) {
        console.log("üîç –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π JSON —Å chunkId");
        for (const jsonMatch of jsonMatches) {
          try {
            const partial = JSON.parse(jsonMatch + ', "analysis": []}');
            return partial;
          } catch (e) {
            continue;
          }
        }
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.warn("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á—É–Ω–∫–∞");
      return {
        chunkId: "failed",
        analysis: []
      };
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createChunksWithTokens(
  paragraphs: Array<{ id: string; text: string }>, 
  maxTokensPerChunk: number = CHUNKING_CONFIG.MAX_TOKENS_PER_CHUNK,
  overlapSentences: number = CHUNKING_CONFIG.OVERLAP_SENTENCES
): Array<{ id: string; paragraphs: Array<{ id: string; text: string }>, tokenCount: number, hasOverlap: boolean }> {
  
  const chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }>, tokenCount: number, hasOverlap: boolean }> = [];
  let currentChunk: Array<{ id: string; text: string }> = [];
  let currentTokenCount = 0;
  let previousChunkSentences: string[] = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  const countTokens = (text: string): number => {
    // –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞
    const AVERAGE_CHARS_PER_TOKEN = 4;
    return Math.ceil(text.length / AVERAGE_CHARS_PER_TOKEN);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const getLastSentences = (text: string, count: number): string[] => {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    return sentences.slice(-count).map(s => s.trim() + '.');
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const createOverlapText = (sentences: string[]): string => {
    if (sentences.length === 0) return '';
    return `[–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–†–ï–î–´–î–£–©–ï–ì–û –ß–ê–ù–ö–ê]: ${sentences.join(' ')}`;
  };
  
  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const paragraphTokens = countTokens(paragraph.text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
    const overlapTokens = previousChunkSentences.length > 0 ? 
      countTokens(createOverlapText(previousChunkSentences)) : 0;
    
    // --- –î–û–ë–ê–í–õ–ï–ù–û: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–±–∑–∞—Ü–µ–≤ ---
    const maxParagraphsPerChunk = 6;
    if ((currentTokenCount + paragraphTokens + overlapTokens > maxTokensPerChunk || currentChunk.length >= maxParagraphsPerChunk) && currentChunk.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞–Ω–∫–∞
      const lastParagraphText = currentChunk[currentChunk.length - 1]?.text || '';
      previousChunkSentences = getLastSentences(lastParagraphText, overlapSentences);
      
      // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫
      chunks.push({
        id: `chunk_${chunks.length + 1}`,
        paragraphs: [...currentChunk],
        tokenCount: currentTokenCount,
        hasOverlap: false
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
      currentChunk = [];
      currentTokenCount = 0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —á–∞–Ω–∫–∞
      if (previousChunkSentences.length > 0) {
        const overlapText = createOverlapText(previousChunkSentences);
        currentChunk.push({
          id: `overlap_${chunks.length + 1}`,
          text: overlapText
        });
        currentTokenCount += countTokens(overlapText);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü
    currentChunk.push(paragraph);
    currentTokenCount += paragraphTokens;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
  if (currentChunk.length > 0) {
    chunks.push({
      id: `chunk_${chunks.length + 1}`,
      paragraphs: currentChunk,
      tokenCount: currentTokenCount,
      hasOverlap: previousChunkSentences.length > 0
    });
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤:`);
  chunks.forEach((chunk, index) => {
    console.log(`   –ß–∞–Ω–∫ ${index + 1}: ${chunk.tokenCount} —Ç–æ–∫–µ–Ω–æ–≤, ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤${chunk.hasOverlap ? ' (—Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º)' : ''}`);
  });
  
  return chunks;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–±–∑–∞—Ü–µ–≤
function createChunks(paragraphs: Array<{ id: string; text: string }>, chunkSize: number = 10): Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }> {
  const chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }> = [];
  
  for (let i = 0; i < paragraphs.length; i += chunkSize) {
    const chunkParagraphs = paragraphs.slice(i, i + chunkSize);
    chunks.push({
      id: `chunk_${chunks.length + 1}`,
      paragraphs: chunkParagraphs
    });
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –ø–æ ${chunkSize} –∞–±–∑–∞—Ü–µ–≤:`);
  chunks.forEach((chunk, index) => {
    console.log(`   –ß–∞–Ω–∫ ${index + 1}: ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤`);
  });
  
  return chunks;
}

// –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429
async function analyzeChunk(
  chunk: { id: string; paragraphs: Array<{ id: string; text: string }> },
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier'
): Promise<any> {
  const maxRetries = 3;
  let lastError: Error | null = null;
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const keyToUse = keyPool.getNextKey();
    
    try {
      const genAI = new GoogleGenerativeAI(keyToUse);
      const model = genAI.getGenerativeModel({ 
        model: MODEL_NAME,
        systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
      });

      const perspectiveContext = perspective === 'buyer'
        ? { role: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è', beneficiary: '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' }
        : { role: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞', beneficiary: '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' };

      const chunkPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è ${perspectiveContext.role}. 

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø (–ß–ï–ö-–õ–ò–°–¢):
${checklistText}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–±–∑–∞—Ü—ã –∏ –ê–ö–¢–ò–í–ù–û —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã—à–µ.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
"checklist" - –∞–±–∑–∞—Ü –ü–û–õ–ù–û–°–¢–¨–Æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç–∞. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏: "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: [—Ç–æ—á–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞]"
"partial" - –∞–±–∑–∞—Ü –ß–ê–°–¢–ò–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏: "üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: [—Ü–∏—Ç–∞—Ç–∞ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞]. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: [—á—Ç–æ –µ—Å—Ç—å]. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: [—á–µ–≥–æ –Ω–µ—Ç]"
"risk" - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∏—Å–∫–∏ –¥–ª—è ${perspectiveContext.beneficiary} (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)  
"ambiguous" - –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏–π
"deemed_acceptance" - —Ä–∏—Å–∫–∏ –º–æ–ª—á–∞–Ω–∏—è/–±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
"external_refs" - —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ì–û–°–¢—ã, –¢–£, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã, –ø—Ä–∞–≤–∏–ª–∞)
null - —Ç–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∞–¥—Ä–µ—Å–∞, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏)

–°–¢–†–û–ì–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: 
1. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—à—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –∞–±–∑–∞—Ü–µ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏, —Å—É–º–º—ã, —É—Å–ª–æ–≤–∏—è), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏! –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–†–û–¢–ò–í–û–†–ï–ß–ò–ï: –ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω —Å—Ä–æ–∫ 10 –¥–Ω–µ–π, –Ω–æ –≤ –ø.5.2 —É–∫–∞–∑–∞–Ω–æ 5 –¥–Ω–µ–π –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"
2. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–∏—Å–≤–æ–π –µ–º—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
   - "ambiguous" –¥–ª—è –ª—é–±—ã—Ö –Ω–µ—Ç–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π
   - "partial" –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π  
   - "risk" –¥–ª—è —Ä–∏—Å–∫–æ–≤
   - "deemed_acceptance" –¥–ª—è —Ä–∏—Å–∫–æ–≤ –º–æ–ª—á–∞–Ω–∏—è
   - "external_refs" –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
3. –ò—Å–ø–æ–ª—å–∑—É–π category: null –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∞–¥—Ä–µ—Å–∞, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –¥–∞—Ç—ã)

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
1. "deemed_acceptance": –ï—Å–ª–∏ –≤ –ø—É–Ω–∫—Ç–µ –µ—Å—Ç—å —Å—Ä–æ–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ù–ï –æ–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, —ç—Ç–æ —Ä–∏—Å–∫! –°–ø—Ä–æ—Å–∏ —Å–µ–±—è: "–ß—Ç–æ –µ—Å–ª–∏ —Å—Ç–æ—Ä–æ–Ω–∞ –ù–ï –≤—ã–ø–æ–ª–Ω–∏—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ä–æ–∫?"
2. "external_refs": –õ—é–±–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ì–û–°–¢, –¢–£, –°–∞–Ω–ü–∏–ù, –ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã - —ç—Ç–æ —Å–∫—Ä—ã—Ç—ã–π —Ä–∏—Å–∫ –Ω–µ–∑–Ω–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –Ω–æ –∏ –ø—Ä–∞–≤–∞: —Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è/–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã?

–ê–±–∑–∞—Ü—ã: ${JSON.stringify(chunk.paragraphs)}

JSON:
{
  "chunkId": "${chunk.id}",
  "analysis": [
    {
      "id": "p1", 
      "category": "checklist",
      "comment": "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: –°—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏",
      "recommendation": null
    },
    {
      "id": "p2", 
      "category": "partial",
      "comment": "üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: –ü–æ—Ä—è–¥–æ–∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤. –í—ã–ø–æ–ª–Ω–µ–Ω–æ: —É–∫–∞–∑–∞–Ω —Å—Ä–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: —Å—Ä–æ–∫ –ø—Ä–∏–±—ã—Ç–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è",
      "recommendation": "–î–æ–±–∞–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–ª—è –ø—Ä–∏–±—ã—Ç–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
    },
    {
      "id": "p3", 
      "category": "deemed_acceptance",
      "comment": "–ù–µ –æ–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –µ—Å–ª–∏ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å—Ä–æ–∫ - –º–æ–ª—á–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—Ä–∞–≤–Ω–µ–Ω–æ –∫ —Å–æ–≥–ª–∞—Å–∏—é",
      "recommendation": "–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç: '–ü—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ —Ç–æ–≤–∞—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—ã–º'"
    },
    {
      "id": "p3", 
      "category": "external_refs",
      "comment": "–°—Å—ã–ª–∫–∞ –Ω–∞ –ì–û–°–¢ 8267-93 - –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é –¥–æ–≥–æ–≤–æ—Ä–∞",
      "recommendation": "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ì–û–°–¢ 8267-93 –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –µ–≥–æ –∫ –¥–æ–≥–æ–≤–æ—Ä—É"
    },
    {
      "id": "p4", 
      "category": "ambiguous",
      "comment": "–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ '–≤ —Ä–∞–∑—É–º–Ω—ã–µ —Å—Ä–æ–∫–∏' –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞ –∏ –º–æ–∂–µ—Ç —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É",
      "recommendation": "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä '10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π'"
    },
    {
      "id": "p5", 
      "category": null,
      "comment": null,
      "recommendation": null
    }
  ],
  "chunkRightsAnalysis": {
    "buyerRightsCount": 2,
    "supplierRightsCount": 1,
    "rightsDetails": [
      "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ø—Ä–∞–≤–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ (–ø. p1)",
      "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ (–ø. p2)", 
      "–ü–æ—Å—Ç–∞–≤—â–∏–∫: –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É (–ø. p4)"
    ],
    "classifiedClauses": [
      { "id": "p1", "party": "buyer", "type": "termination" },
      { "id": "p2", "party": "buyer", "type": "control" },
      { "id": "p4", "party": "supplier", "type": "modification" }
    ]
  }
}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–¥—Å—á–∏—Ç–∞–π –ø—Ä–∞–≤–∞ –≤ —Å–µ–∫—Ü–∏–∏ chunkRightsAnalysis:
- buyerRightsCount: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤/–æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
- supplierRightsCount: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤/–æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ  
- rightsDetails: –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ (—Ñ–æ—Ä–º–∞—Ç: "–°—Ç–æ—Ä–æ–Ω–∞: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø. id)")
- classifiedClauses: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∞ –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ –∏ —Ç–∏–ø—É:
  * party: "buyer", "supplier", "both", "neutral"
  * type: "termination" (—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ), "modification" (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π), "liability" (—à—Ç—Ä–∞—Ñ—ã/–Ω–µ—É—Å—Ç–æ–π–∫–∏), "control" (–ø—Ä–æ–≤–µ—Ä–∫–∞/–ø—Ä–∏–µ–º–∫–∞), "procedural" (–ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞)

–ó–ê–ü–û–ú–ù–ò: 
- –ü—É–Ω–∫—Ç p4 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "ambiguous" —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
- –ü—É–Ω–∫—Ç p5 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è category: null - —Ç–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!
- chunkRightsAnalysis –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û –ø—Ä–∞–≤–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞!
- classifiedClauses –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –í–°–ï –ø—É–Ω–∫—Ç—ã —Å –ø—Ä–∞–≤–∞–º–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ "both" –∏–ª–∏ "neutral"`;

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: chunkPrompt }] }],
        generationConfig: {
          responseMimeType: "application/json",
          temperature: 0.1,
          maxOutputTokens: 8000, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –ª–∏–º–∏—Ç–µ
          topP: 0.95,
          topK: 64,
        },
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
          },
        ],
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      const finishReason = result.response?.candidates?.[0]?.finishReason;
      const usageMetadata = result.response?.usageMetadata;
      
      console.log(`üìä ${chunk.id}: finishReason=${finishReason}, usageMetadata:`, usageMetadata);
      
      if (finishReason && finishReason !== 'STOP') {
        console.warn(`‚ö†Ô∏è ${chunk.id}: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - ${finishReason}`);
        
        if (finishReason === 'MAX_TOKENS') {
          console.warn(`‚ö†Ô∏è ${chunk.id}: –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ - –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
        } else if (finishReason === 'OTHER') {
          console.warn(`‚ö†Ô∏è ${chunk.id}: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ - –≤–æ–∑–º–æ–∂–Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Gemini`);
        } else if (finishReason === 'SAFETY') {
          console.warn(`‚ö†Ô∏è ${chunk.id}: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`);
        }
      }

      const rawResponse = result.response.text();
      console.log(`üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è ${chunk.id}:`, rawResponse.substring(0, 300));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
      keyPool.logTokenUsage(`CHUNK_${chunk.id}`, chunkPrompt, rawResponse);
      
      return extractJsonFromResponse(rawResponse);
      
    } catch (error: any) {
      lastError = error;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π 429 (–∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞)
      if (error.message && error.message.includes('429') && error.message.includes('Resource has been exhausted')) {
        console.warn(`‚ö†Ô∏è ${chunk.id}: –ö–ª—é—á ${keyToUse.substring(0, 10)}... –∏—Å—á–µ—Ä–ø–∞–ª –∫–≤–æ—Ç—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π`);
        keyPool.markKeyAsExhausted(keyToUse);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (keyPool.getAvailableKeyCount() > 0) {
          console.log(`üîÑ ${chunk.id}: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          continue;
        } else {
          console.error(`‚ùå ${chunk.id}: –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–≤–æ—Ç—ã`);
          throw error;
        }
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      console.warn(`‚ö†Ô∏è ${chunk.id}: –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries}):`, error.message);
      if (attempt < maxRetries - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1))); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      }
    }
  }
  
  throw lastError || new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞–Ω–∫ ${chunk.id} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
async function processChunksInParallel(
  chunks: Array<{ id: string; paragraphs: Array<{ id: string; text: string }> }>,
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any[]> {
  const results: any[] = [];
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
  const batchSize = Math.min(8, keyPool.getAvailableKeyCount()); // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
  const batchDelay = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
  
  console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${chunks.length} —á–∞–Ω–∫–æ–≤ (–±–∞—Ç—á–∏ –ø–æ ${batchSize}, –ø–∞—É–∑–∞ ${batchDelay}ms)`);
  
  let processedChunks = 0;
  const totalChunks = chunks.length;
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —á–∞–Ω–∫–∏ –Ω–∞ –±–∞—Ç—á–∏
  for (let i = 0; i < chunks.length; i += batchSize) {
    const batch = chunks.slice(i, i + batchSize);
    const batchNumber = Math.floor(i / batchSize) + 1;
    const totalBatches = Math.ceil(chunks.length / batchSize);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const percentComplete = Math.round((processedChunks / totalChunks) * 100);
    onProgress(`–≠—Ç–∞–ø 2/7: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞... ${percentComplete}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç—á ${batchNumber}: —á–∞–Ω–∫–∏ ${i + 1}-${Math.min(i + batchSize, chunks.length)}`);
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const batchPromises = batch.map(async (chunk, index) => {
        const chunkNumber = i + index + 1;
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${chunkNumber} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: ${chunk.paragraphs.length} –∞–±–∑–∞—Ü–µ–≤`);
        
        try {
          const result = await analyzeChunk(chunk, checklistText, riskText, perspective);
          console.log(`‚úÖ –ß–∞–Ω–∫ ${chunkNumber} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
          return { index: chunkNumber - 1, result };
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞–Ω–∫–µ ${chunkNumber}:`, error);
          throw new Error(`–ß–∞–Ω–∫ ${chunkNumber}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
      const batchResults = await Promise.allSettled(batchPromises);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      batchResults.forEach((result, batchIndex) => {
        if (result.status === 'fulfilled') {
          results[result.value.index] = result.value.result;
          processedChunks++;
        } else {
          const chunkNumber = i + batchIndex + 1;
          console.error(`‚ùå –ë–∞—Ç—á ${batchNumber}, —á–∞–Ω–∫ ${chunkNumber} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, result.reason);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞–Ω–∫ ${chunkNumber}: ${result.reason}`);
        }
      });
      
      console.log(`‚úÖ –ë–∞—Ç—á ${batchNumber} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (${batch.length} —á–∞–Ω–∫–æ–≤)`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
      const updatedPercent = Math.round((processedChunks / totalChunks) * 100);
      onProgress(`–≠—Ç–∞–ø 2/7: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞... ${updatedPercent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
      if (i + batchSize < chunks.length) {
        const availableKeys = keyPool.getAvailableKeyCount();
        const actualDelay = availableKeys > 6 ? batchDelay * 0.7 : batchDelay; // –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π
        
        console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ ${actualDelay}ms –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π: ${availableKeys})`);
        onProgress(`–≠—Ç–∞–ø 2/7: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∞...`);
        await new Promise(resolve => setTimeout(resolve, actualDelay));
      }
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchNumber}:`, error);
      throw error;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
  const processedCount = results.filter(r => r !== undefined).length;
  console.log(`üìä –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processedCount}/${chunks.length} —á–∞–Ω–∫–æ–≤`);
  
  if (processedCount !== chunks.length) {
    throw new Error(`–ù–µ –≤—Å–µ —á–∞–Ω–∫–∏ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${processedCount}/${chunks.length}`);
  }
  
  return results;
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
async function performFinalStructuralAnalysis(
  allAnalysis: any[],
  missingRequirements: any[],
  contradictions: any[],
  rightsImbalance: any[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  // onProgress —É–∂–µ –≤—ã–∑–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  // –°–æ–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const criticalRisks = allAnalysis
    .filter((a: any) => a.category === 'risk' && a.comment)
    .map((a: any) => a.comment)
    .slice(0, 5); // –¢–æ–ø-5 —Ä–∏—Å–∫–æ–≤

  const deemedAcceptanceIssues = allAnalysis
    .filter((a: any) => a.category === 'deemed_acceptance' && a.comment)
    .map((a: any) => a.comment)
    .slice(0, 3); // –¢–æ–ø-3 –ø—Ä–æ–±–ª–µ–º—ã –º–æ–ª—á–∞–Ω–∏—è

  const externalRefsIssues = allAnalysis
    .filter((a: any) => a.category === 'external_refs' && a.comment)
    .map((a: any) => a.comment)
    .slice(0, 3); // –¢–æ–ø-3 –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏

  const partialIssues = allAnalysis
    .filter((a: any) => a.category === 'partial' && a.comment)
    .map((a: any) => a.comment)
    .slice(0, 3); // –¢–æ–ø-3 —á–∞—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

  const topMissingRequirements = missingRequirements
    .slice(0, 5)
    .map((req: any) => req.requirement || req.comment);

  const topContradictions = contradictions
    .slice(0, 3)
    .map((contr: any) => contr.description);

  const topRightsImbalance = rightsImbalance
    .slice(0, 3)
    .map((imb: any) => imb.description);

  const structuralPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –ü–û–õ–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –¥–ª—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.

–ö–†–ò–¢–ò–ß–ù–´–ï –†–ò–°–ö–ò –ò–ó –ê–ù–ê–õ–ò–ó–ê:
${criticalRisks.length > 0 ? criticalRisks.join('\n- ') : '–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

–ü–†–û–ë–õ–ï–ú–´ –ú–û–õ–ß–ê–ù–ò–Ø/–ë–ï–ó–î–ï–ô–°–¢–í–ò–Ø:
${deemedAcceptanceIssues.length > 0 ? deemedAcceptanceIssues.join('\n- ') : '–ü—Ä–æ–±–ª–µ–º –º–æ–ª—á–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

–í–ù–ï–®–ù–ò–ï –°–°–´–õ–ö–ò (–°–ö–†–´–¢–´–ï –†–ò–°–ö–ò):
${externalRefsIssues.length > 0 ? externalRefsIssues.join('\n- ') : '–í–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

–ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:
${partialIssues.length > 0 ? partialIssues.join('\n- ') : '–ß–∞—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

–û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
${topMissingRequirements.length > 0 ? topMissingRequirements.join('\n- ') : '–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'}

–ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø –í –î–û–ì–û–í–û–†–ï:
${topContradictions.length > 0 ? topContradictions.join('\n- ') : '–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

–î–ò–°–ë–ê–õ–ê–ù–° –ü–†–ê–í:
${topRightsImbalance.length > 0 ? topRightsImbalance.join('\n- ') : '–î–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: ${allAnalysis.length}
- –ù–∞–π–¥–µ–Ω–æ —Ä–∏—Å–∫–æ–≤: ${criticalRisks.length}
- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ${missingRequirements.length}
- –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ${contradictions.length}
- –î–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∞–≤: ${rightsImbalance.length}

–í–µ—Ä–Ω–∏ JSON —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–æ–π, —É–∫–∞–∑–∞–≤ –¢–û–õ–¨–ö–û –°–ê–ú–´–ï –í–ê–ñ–ù–´–ï —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{
  "structuralAnalysis": {
    "overallAssessment": "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    "keyRisks": ["–¢–æ–ª—å–∫–æ 3-5 –°–ê–ú–´–• –ö–†–ò–¢–ò–ß–ù–´–• —Ä–∏—Å–∫–æ–≤ –∏–∑ –≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"],
    "structureComments": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å —É—á–µ—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º",
    "legalCompliance": "–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É",
    "recommendations": ["–¢–æ–ª—å–∫–æ 3-5 –°–ê–ú–´–• –í–ê–ñ–ù–´–• —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"]
  }
}

–í–ê–ñ–ù–û: –§–æ–∫—É—Å–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º—ã—Ö —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º —É–±—ã—Ç–∫–∞–º –∏–ª–∏ –ø—Ä–∞–≤–æ–≤—ã–º —Ä–∏—Å–∫–∞–º.`;

  const result = await model.generateContent({
    contents: [{ role: "user", parts: [{ text: structuralPrompt }] }],
    generationConfig: {
      responseMimeType: "application/json",
      temperature: 0.1,
      maxOutputTokens: 8000,
      topP: 0.95,
      topK: 64,
    },
    safetySettings: [
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
      },
    ],
  });

  const rawResponse = result.response.text();
  console.log("üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", rawResponse.substring(0, 300));
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  keyPool.logTokenUsage('FINAL_STRUCTURAL_ANALYSIS', structuralPrompt, rawResponse);
  
  return extractJsonFromResponse(rawResponse);
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function performStructuralAnalysis(
  contractText: string,
  chunkResults: any[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  // onProgress —É–∂–µ –≤—ã–∑–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const summaryResults = chunkResults.map(chunk => {
    const analysis = chunk.analysis || [];
    return {
      chunkId: chunk.chunkId,
      totalAnalyzed: analysis.length,
      risks: analysis.filter((a: any) => a.category === 'risk').length,
      partialIssues: analysis.filter((a: any) => a.category === 'partial').length,
      ambiguous: analysis.filter((a: any) => a.category === 'ambiguous').length,
      deemedAcceptance: analysis.filter((a: any) => a.category === 'deemed_acceptance').length,
      externalRefs: analysis.filter((a: any) => a.category === 'external_refs').length,
      checklist: analysis.filter((a: any) => a.category === 'checklist').length
    };
  });

  const structuralPrompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê –ü–û –ß–ê–ù–ö–ê–ú:
${JSON.stringify(summaryResults, null, 2)}

–í–µ—Ä–Ω–∏ JSON —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π:
{
  "structuralAnalysis": {
    "overallAssessment": "–ö—Ä–∞—Ç–∫–∞—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    "keyRisks": ["–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ 1", "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫ 2"],
    "structureComments": "–ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
    "legalCompliance": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
    "recommendations": ["–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "–ö–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
  }
}`;

  const result = await model.generateContent({
    contents: [{ role: "user", parts: [{ text: structuralPrompt }] }],
    generationConfig: {
      responseMimeType: "application/json",
      temperature: 0.1,
      maxOutputTokens: 8000,
      topP: 0.95,
      topK: 64,
    },
    safetySettings: [
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
      },
    ],
  });

  const rawResponse = result.response.text();
  console.log("üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", rawResponse.substring(0, 300));
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  keyPool.logTokenUsage('STRUCTURAL_ANALYSIS', structuralPrompt, rawResponse);
  
  return extractJsonFromResponse(rawResponse);
}

// –ù–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–±–µ–∑ AI)
function findMissingRequirementsReliable(
  allAnalysis: any[],
  checklistText: string
): { missingRequirements: any[] } {
  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
  
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞
  const allRequirements = checklistText
    .split(/[‚Ä¢\n]/)
    .map(req => req.trim().replace(/^[‚Ä¢\-\*\d\.]+\s*/, '')) // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
    .filter(req => req.length > 20) // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    .map((req, index) => ({
      id: `req_${index + 1}`,
      text: req,
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–µ 30-50 —Å–∏–º–≤–æ–ª–æ–≤)
      searchPhrase: req.substring(0, 50).toLowerCase()
    }));

  console.log(`üìã –í—Å–µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —á–µ–∫-–ª–∏—Å—Ç–µ: ${allRequirements.length}`);

  // –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ AI, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const foundRequirementComments = allAnalysis
    .filter(item => 
      (item.category === 'checklist' || item.category === 'partial') && 
      item.comment &&
      (item.comment.includes('‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:') || 
       item.comment.includes('üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:'))
    )
    .map(item => item.comment.toLowerCase());

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ${foundRequirementComments.length}`);

  // –®–∞–≥ 3: –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const missingRequirements: any[] = [];
  
  allRequirements.forEach(requirement => {
    // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö AI
    const isFound = foundRequirementComments.some(comment => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const searchTerms = [
        requirement.searchPhrase,
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        ...requirement.text.toLowerCase().split(' ')
          .filter(word => word.length > 4)
          .slice(0, 3) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤–∞
      ];
      
      return searchTerms.some(term => 
        term.length > 4 && comment.includes(term)
      );
    });
    
    if (!isFound) {
      missingRequirements.push({
        requirement: requirement.text,
        comment: "–î–∞–Ω–Ω–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∞."
      });
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${requirement.text.substring(0, 60)}...`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${requirement.text.substring(0, 60)}...`);
    }
  });

  console.log(`üìä –ò—Ç–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ${missingRequirements.length}`);
  
  return { missingRequirements };
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (DEPRECATED)
async function findMissingRequirementsImproved(
  allAnalysis: any[],
  checklistText: string,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
  
  // –®–∞–≥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  const foundRequirements = allAnalysis
    .filter(item => item.category === 'checklist' || item.category === 'partial')
    .map(item => ({
      category: item.category,
      comment: item.comment || '',
      recommendation: item.recommendation || ''
    }));

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö/—á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ${foundRequirements.length}`);

  // –®–∞–≥ 2: –†–∞–∑–±–∏–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const allRequirements = checklistText
    .split(/[‚Ä¢\n]/)
    .map(req => req.trim())
    .filter(req => req.length > 20) // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    .map((req, index) => ({
      id: `req_${index + 1}`,
      text: req.replace(/^[‚Ä¢\-\*\d\.]+\s*/, ''), // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
      keywords: extractKeywords(req)
    }));

  console.log(`üìã –í—Å–µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —á–µ–∫-–ª–∏—Å—Ç–µ: ${allRequirements.length}`);

  // –®–∞–≥ 3: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const locallyFoundRequirements = new Set<string>();
  
  allRequirements.forEach(requirement => {
    const isFound = foundRequirements.some(found => {
      const foundText = (found.comment + ' ' + found.recommendation).toLowerCase();
      const matchingKeywords = requirement.keywords.filter(keyword => 
        foundText.includes(keyword.toLowerCase())
      );
      
      // –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç 40% –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ 2+ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
      const matchRatio = matchingKeywords.length / requirement.keywords.length;
      return matchRatio >= 0.4 || matchingKeywords.length >= 2;
    });
    
    if (isFound) {
      locallyFoundRequirements.add(requirement.id);
      console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${requirement.text.substring(0, 50)}...`);
    }
  });

  // –®–∞–≥ 4: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const potentiallyMissing = allRequirements.filter(req => 
    !locallyFoundRequirements.has(req.id)
  );

  console.log(`üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: ${potentiallyMissing.length}`);

  // –®–∞–≥ 5: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (potentiallyMissing.length === 0) {
    return { missingRequirements: [] };
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ø-10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö)
  const topMissing = potentiallyMissing
    .slice(0, 10)
    .map(req => req.text);

  // –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
  return await verifyMissingRequirementsWithAI(
    topMissing,
    foundRequirements,
    perspective,
    onProgress
  );
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
function extractKeywords(text: string): string[] {
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  const stopWords = new Set([
    '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–ø—Ä–∏', '—á—Ç–æ', '–∫–∞–∫', '–∏–ª–∏', '–Ω–æ', '–∞', '—Ç–æ',
    '—ç—Ç–æ', '–≤—Å–µ', '–µ—â–µ', '—É–∂–µ', '—Ç–æ–ª—å–∫–æ', '–º–æ–∂–µ—Ç', '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–¥–æ–ª–∂–Ω–æ', '–±—ã—Ç—å',
    '–∏–º–µ—Ç—å', '–µ—Å—Ç—å', '–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–æ', '–±—É–¥–µ—Ç', '–µ—Å–ª–∏', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫–æ—Ç–æ—Ä—ã–π',
    '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä–æ–µ', '–∫–æ—Ç–æ—Ä—ã–µ', '—Ç–∞–∫–∂–µ', '—Ç–∞–∫–∏–º', '—Ç–∞–∫–æ–π', '—Ç–∞–∫–æ–µ', '—Ç–∞–∫–∏–µ'
  ]);

  const words = text
    .toLowerCase()
    .replace(/[^\w–∞-—è—ë\s]/g, ' ') // –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    .split(/\s+/)
    .filter(word => 
      word.length > 3 && 
      !stopWords.has(word) &&
      !/^\d+$/.test(word) // –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞
    );

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–∫–∂–µ –±–∏–≥—Ä–∞–º–º—ã (–¥–≤—É—Ö—Å–ª–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã) –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  const bigrams: string[] = [];
  for (let i = 0; i < words.length - 1; i++) {
    const bigram = `${words[i]} ${words[i + 1]}`;
    if (bigram.length > 6) {
      bigrams.push(bigram);
    }
  }

  return [...words, ...bigrams];
}

// AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async function verifyMissingRequirementsWithAI(
  potentiallyMissing: string[],
  foundRequirements: any[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  console.log(`ü§ñ AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ ${potentiallyMissing.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
  
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  const foundSummary = foundRequirements
    .slice(0, 15) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    .map(req => `${req.category}: ${req.comment?.substring(0, 80) || '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}`)
    .join('\n');

  const verificationPrompt = `–ü—Ä–æ–≤–µ—Ä—å, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–æ–≥–æ–≤–æ—Ä–µ.

–ù–ê–ô–î–ï–ù–ù–´–ï –í –î–û–ì–û–í–û–†–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
${foundSummary}

–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
${potentiallyMissing.map((req, i) => `${i + 1}. ${req}`).join('\n')}

–í–µ—Ä–Ω–∏ JSON —Ç–æ–ª—å–∫–æ —Å –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ (–º–∞–∫—Å–∏–º—É–º 8):
{
  "missingRequirements": [
    {
      "requirement": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
      "comment": "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è ${perspective === 'buyer' ? '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'}"
    }
  ]
}`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: verificationPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 4000, // –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log("üîç AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", rawResponse.substring(0, 200));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç AI-–ø—Ä–æ–≤–µ—Ä–∫–∏");
      return { missingRequirements: [] };
    }
    
    return extractJsonFromResponse(rawResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
    }
    return { missingRequirements: [] };
  }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function findMissingRequirements(
  contractText: string,
  checklistText: string,
  foundConditions: string[],
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  // onProgress —É–∂–µ –≤—ã–∑–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const missingPrompt = `–ù–∞–π–¥–∏ –¥–æ 10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Å—Ä–∞–≤–Ω–∏–≤ —á–µ–∫-–ª–∏—Å—Ç —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.

–ü–û–õ–ù–´–ô –ß–ï–ö-–õ–ò–°–¢:
${checklistText}

–£–ñ–ï –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø (–≤—Å–µ–≥–æ ${foundConditions.length}):
${foundConditions.join(', ')}

–í–µ—Ä–Ω–∏ JSON —Å –¥–æ 10 —Å–∞–º—ã–º–∏ –≤–∞–∂–Ω—ã–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
{
  "missingRequirements": [
    {
      "requirement": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
      "comment": "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏"
    }
  ]
}`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: missingPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 8000,
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", rawResponse.substring(0, 300));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π");
      return { missingRequirements: [] };
    }
    
    return extractJsonFromResponse(rawResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
      console.log("üîë –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π...");
      return await findMissingRequirements(contractText, checklistText, foundConditions, perspective, onProgress);
    }
    return { missingRequirements: [] };
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
function extractEntitiesFromAnalysis(contractParagraphs: ContractParagraph[]): Array<{
  id: string;
  text: string;
  entityType: '—Å—Ä–æ–∫' | '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å' | '–ø–µ–Ω—è' | '–Ω–µ—É—Å—Ç–æ–π–∫–∞' | '—Å—É–º–º–∞' | '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' | '–ø—Ä–æ—Ü–µ–Ω—Ç';
  value: string;
  context: string;
}> {
  const entities: Array<{
    id: string;
    text: string;
    entityType: '—Å—Ä–æ–∫' | '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å' | '–ø–µ–Ω—è' | '–Ω–µ—É—Å—Ç–æ–π–∫–∞' | '—Å—É–º–º–∞' | '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' | '–ø—Ä–æ—Ü–µ–Ω—Ç';
    value: string;
    context: string;
  }> = [];

  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ ${contractParagraphs.length} –∞–±–∑–∞—Ü–µ–≤`);

  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
  const patterns = {
    —Å—Ä–æ–∫: /(\d+)\s*(–¥–Ω|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω|—Ä–∞–±–æ—á|–º–µ—Å—è—Ü|–≥–æ–¥)/gi,
    –ø—Ä–æ—Ü–µ–Ω—Ç: /(\d+(?:[.,]\d+)?)\s*%|\d+(?:[.,]\d+)?\s*–ø—Ä–æ—Ü–µ–Ω—Ç/gi,
    —Å—É–º–º–∞: /(\d+(?:\s?\d{3})*(?:[.,]\d+)?)\s*(—Ä—É–±|—Ä—É–±–ª|–∫–æ–ø|—Ç—ã—Å|–º–ª–Ω|—Ç—ã—Å—è—á|–º–∏–ª–ª–∏–æ–Ω)/gi,
    –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: /(–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å|–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ|–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å|—à—Ç—Ä–∞—Ñ|—Å–∞–Ω–∫—Ü–∏–∏)/gi,
    –ø–µ–Ω—è: /(–ø–µ–Ω—è|–ø–µ–Ω–∏|–Ω–µ—É—Å—Ç–æ–π–∫–∞|—à—Ç—Ä–∞—Ñ)/gi
  };

  contractParagraphs.forEach(paragraph => {
    const text = paragraph.text.toLowerCase();
    
    // –ü–æ–∏—Å–∫ —Å—Ä–æ–∫–æ–≤
    let srokMatch;
    const srokPattern = /(\d+)\s*(–¥–Ω|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω|—Ä–∞–±–æ—á|–º–µ—Å—è—Ü|–≥–æ–¥)/gi;
    while ((srokMatch = srokPattern.exec(text)) !== null) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '—Å—Ä–æ–∫',
        value: srokMatch[0],
        context: paragraph.text.substring(Math.max(0, srokMatch.index! - 50), srokMatch.index! + srokMatch[0].length + 50)
      });
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    let percentMatch;
    const percentPattern = /(\d+(?:[.,]\d+)?)\s*%|\d+(?:[.,]\d+)?\s*–ø—Ä–æ—Ü–µ–Ω—Ç/gi;
    while ((percentMatch = percentPattern.exec(text)) !== null) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '–ø—Ä–æ—Ü–µ–Ω—Ç',
        value: percentMatch[0],
        context: paragraph.text.substring(Math.max(0, percentMatch.index! - 50), percentMatch.index! + percentMatch[0].length + 50)
      });
    }

    // –ü–æ–∏—Å–∫ —Å—É–º–º
    let sumMatch;
    const sumPattern = /(\d+(?:\s?\d{3})*(?:[.,]\d+)?)\s*(—Ä—É–±|—Ä—É–±–ª|–∫–æ–ø|—Ç—ã—Å|–º–ª–Ω|—Ç—ã—Å—è—á|–º–∏–ª–ª–∏–æ–Ω)/gi;
    while ((sumMatch = sumPattern.exec(text)) !== null) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '—Å—É–º–º–∞',
        value: sumMatch[0],
        context: paragraph.text.substring(Math.max(0, sumMatch.index! - 50), sumMatch.index! + sumMatch[0].length + 50)
      });
    }

    // –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ–Ω–∏
    if (patterns.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.test(text) || patterns.–ø–µ–Ω—è.test(text)) {
      entities.push({
        id: paragraph.id,
        text: paragraph.text,
        entityType: '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
        value: text.match(patterns.–ø—Ä–æ—Ü–µ–Ω—Ç)?.[0] || text.match(patterns.—Å—É–º–º–∞)?.[0] || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        context: paragraph.text
      });
    }
  });

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const entitiesByType = entities.reduce((acc, entity) => {
    if (!acc[entity.entityType]) acc[entity.entityType] = 0;
    acc[entity.entityType]++;
    return acc;
  }, {} as Record<string, number>);

  console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º:`, entitiesByType);
  console.log(`üìà –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: ${entities.length}`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
  Object.keys(entitiesByType).forEach(type => {
    const exampleEntities = entities.filter(e => e.entityType === type).slice(0, 2);
    if (exampleEntities.length > 0) {
      console.log(`üí° –ü—Ä–∏–º–µ—Ä—ã —Å—É—â–Ω–æ—Å—Ç–µ–π —Ç–∏–ø–∞ "${type}":`, 
        exampleEntities.map(e => `${e.value} (${e.id})`)
      );
    }
  });

  return entities;
}

// –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
function findPotentialContradictions(entities: Array<{
  id: string;
  text: string;
  entityType: string;
  value: string;
  context: string;
}>): Array<{
  entity1: any;
  entity2: any;
  type: 'temporal' | 'financial' | 'quantitative' | 'legal';
}> {
  const potentialContradictions: Array<{
    entity1: any;
    entity2: any;
    type: 'temporal' | 'financial' | 'quantitative' | 'legal';
  }> = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É
  const entitiesByType = entities.reduce((acc, entity) => {
    if (!acc[entity.entityType]) acc[entity.entityType] = [];
    acc[entity.entityType].push(entity);
    return acc;
  }, {} as Record<string, any[]>);

  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º:', Object.keys(entitiesByType).map(type => `${type}: ${entitiesByType[type].length}`));

  // –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ —Å—Ä–æ–∫–∞—Ö
  if (entitiesByType.—Å—Ä–æ–∫ && entitiesByType.—Å—Ä–æ–∫.length > 1) {
    console.log(`üïê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${entitiesByType.—Å—Ä–æ–∫.length} —Å—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è`);
    for (let i = 0; i < entitiesByType.—Å—Ä–æ–∫.length; i++) {
      for (let j = i + 1; j < entitiesByType.—Å—Ä–æ–∫.length; j++) {
        const entity1 = entitiesByType.—Å—Ä–æ–∫[i];
        const entity2 = entitiesByType.—Å—Ä–æ–∫[j];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ—Ö–æ–∂–∏, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ
        if (entity1.id !== entity2.id && entity1.value !== entity2.value) {
          const context1Words = entity1.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
          const context2Words = entity2.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
          const commonWords = context1Words.filter((word: string) => 
            context2Words.includes(word) && !['—ç—Ç–æ–º', '—Ç–æ–≥–æ', '—ç—Ç–æ–≥–æ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ—Ç–æ—Ä—ã—Ö', '–º–æ–∂–µ—Ç', '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–º–æ–∂–µ—Ç', '–±—É–¥–µ—Ç'].includes(word)
          );
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
          if (commonWords.length >= 3 || 
              (commonWords.length >= 2 && (
                entity1.context.includes('–ø–æ—Å—Ç–∞–≤–∫–∞') && entity2.context.includes('–ø–æ—Å—Ç–∞–≤–∫–∞') ||
                entity1.context.includes('–ø–ª–∞—Ç–µ–∂') && entity2.context.includes('–ø–ª–∞—Ç–µ–∂') ||
                entity1.context.includes('–æ–ø–ª–∞—Ç–∞') && entity2.context.includes('–æ–ø–ª–∞—Ç–∞')
              ))) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: ${entity1.value} vs ${entity2.value}, –æ–±—â–∏—Ö —Å–ª–æ–≤: ${commonWords.length}`);
            potentialContradictions.push({
              entity1,
              entity2,
              type: 'temporal'
            });
          }
        }
      }
    }
  }

  // –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  if (entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç && entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length > 1) {
    console.log(`üí∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è`);
    for (let i = 0; i < entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length; i++) {
      for (let j = i + 1; j < entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç.length; j++) {
        const entity1 = entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç[i];
        const entity2 = entitiesByType.–ø—Ä–æ—Ü–µ–Ω—Ç[j];
        
        if (entity1.id !== entity2.id && entity1.value !== entity2.value) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const num1 = parseFloat(entity1.value.replace(/[^\d.,]/g, '').replace(',', '.'));
          const num2 = parseFloat(entity2.value.replace(/[^\d.,]/g, '').replace(',', '.'));
          
          // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ—Ö–æ–∂–∏
          if (!isNaN(num1) && !isNaN(num2) && Math.abs(num1 - num2) > 0.1) {
            const context1Words = entity1.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
            const context2Words = entity2.context.toLowerCase().split(/\s+/).filter((word: string) => word.length > 3);
            const commonWords = context1Words.filter((word: string) => 
              context2Words.includes(word) && !['—ç—Ç–æ–º', '—Ç–æ–≥–æ', '—ç—Ç–æ–≥–æ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ—Ç–æ—Ä—ã—Ö'].includes(word)
            );
            
            if (commonWords.length >= 2 || 
                (entity1.context.includes('–Ω–µ—É—Å—Ç–æ–π–∫–∞') && entity2.context.includes('–Ω–µ—É—Å—Ç–æ–π–∫–∞')) ||
                (entity1.context.includes('–ø–µ–Ω—è') && entity2.context.includes('–ø–µ–Ω—è')) ||
                (entity1.context.includes('—à—Ç—Ä–∞—Ñ') && entity2.context.includes('—à—Ç—Ä–∞—Ñ'))) {
              console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: ${entity1.value} vs ${entity2.value}`);
              potentialContradictions.push({
                entity1,
                entity2,
                type: 'quantitative'
              });
            }
          }
        }
      }
    }
  }

  // –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
  if (entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å && entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length > 1) {
    console.log(`‚öñÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length} –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è`);
    for (let i = 0; i < entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length; i++) {
      for (let j = i + 1; j < entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.length; j++) {
        const entity1 = entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å[i];
        const entity2 = entitiesByType.–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å[j];
        
        if (entity1.id !== entity2.id && entity1.value !== entity2.value && 
            entity1.value !== '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' && entity2.value !== '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') {
          console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: ${entity1.value} vs ${entity2.value}`);
          potentialContradictions.push({
            entity1,
            entity2,
            type: 'financial'
          });
        }
      }
    }
  }

  console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ${potentialContradictions.length}`);
  return potentialContradictions;
}

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π —á–µ—Ä–µ–∑ AI
async function verifyContradictionWithAI(
  potential: {
    entity1: any;
    entity2: any;
    type: 'temporal' | 'financial' | 'quantitative' | 'legal';
  },
  perspective: 'buyer' | 'supplier'
): Promise<any | null> {
  try {
    const keyToUse = keyPool.getNextKey();
    const genAI = new GoogleGenerativeAI(keyToUse);
    const model = genAI.getGenerativeModel({ 
      model: MODEL_NAME,
      systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è.`
    });

    const verificationPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–≤–∞ –ø—É–Ω–∫—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:

–ü–£–ù–ö–¢ 1: "${potential.entity1.text.substring(0, 500)}"
–ó–ù–ê–ß–ï–ù–ò–ï 1: ${potential.entity1.value}

–ü–£–ù–ö–¢ 2: "${potential.entity2.text.substring(0, 500)}"  
–ó–ù–ê–ß–ï–ù–ò–ï 2: ${potential.entity2.value}

–≠—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É? –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON:

{
  "isContradiction": true/false,
  "severity": "high"/"medium"/"low", 
  "explanation": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
  "recommendation": "–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
}`;

    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: verificationPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 4000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log(`üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è: ${rawResponse.substring(0, 200)}`);
    
    const verification = extractJsonFromResponse(rawResponse);
    
    if (verification.isContradiction) {
      return {
        id: `contradiction_${potential.entity1.id}_${potential.entity2.id}`,
        type: potential.type,
        description: verification.explanation,
        conflictingParagraphs: {
          paragraph1: {
            text: potential.entity1.text,
            value: potential.entity1.value
          },
          paragraph2: {
            text: potential.entity2.text,
            value: potential.entity2.value
          }
        },
        severity: verification.severity,
        recommendation: verification.recommendation
      };
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è:', error);
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ–º –∫–≤–æ—Ç—ã, –æ—Ç–º–µ—á–∞–µ–º –∫–ª—é—á
    if (error instanceof Error && error.message.includes('429')) {
      const keyToUse = keyPool.getNextKey();
      keyPool.markKeyAsExhausted(keyToUse);
    }
    
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è AI-–≤–µ—Ä—Å–∏—è)
async function findContradictions(
  allAnalysis: any[],
  paragraphs: Array<{ id: string; text: string }>,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  // onProgress —É–∂–µ –≤—ã–∑–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É —Å –ø–æ–ª–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
  const analyzedSummary = allAnalysis
    .filter(item => item.category && item.category !== null)
    .map(item => {
      const paragraph = paragraphs.find(p => p.id === item.id);
      return {
        id: item.id,
        text: paragraph?.text || '', // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        category: item.category,
        comment: item.comment?.substring(0, 150) || null // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      };
    })
    .slice(0, 25); // –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –∏–∑-–∑–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

  // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–∞–ª–æ, –Ω–µ –∏—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
  if (analyzedSummary.length < 3) {
    console.log("üîç –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
    return { contradictions: [] };
  }

  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${perspective === 'buyer' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'}.`
  });

  const contradictionsPrompt = `–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã –ø—É–Ω–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è–º–æ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É.

–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–£–ù–ö–¢–´:
${JSON.stringify(analyzedSummary, null, 2)}

–ò—â–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤:
- **–°—Ä–æ–∫–∞—Ö** (—Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä)
- **–°—É–º–º–∞—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö** (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à—Ç—Ä–∞—Ñ–æ–≤/–ø–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π)
- **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏** (–∫—Ç–æ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∑–æ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏)
- **–£—Å–ª–æ–≤–∏—è—Ö —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è** (–∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è)
- **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö** (–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–µ –Ω–æ—Ä–º—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã)
- **–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö** (–Ω–∞–ª–∏—á–∏–µ –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å–ª–∞–±–ª—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞). 
  –ü–†–ò–ú–ï–†: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–æ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–ø. 7.5) –ò –ø—Ä–∞–≤–æ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã (–ø. 7.8), —ç—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –∑–∞—á–µ–º —Å–ª–æ–∂–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã?
- **–õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è—Ö** (–ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º—ã–º–∏)
- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö** (–∫–æ–≥–¥–∞ –Ω–µ—è—Å–Ω–æ, –∫–∞–∫–æ–π –ø—É–Ω–∫—Ç –∏–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏)

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï –∫ —Ç–æ–Ω–∫–∏–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è–º:
- –†–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –ü—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ö–æ–¥—è—Ç –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑—É—é—Ç –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã
- –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –æ–±—â–∏–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏

–ï—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤. –ï—Å–ª–∏ –µ—Å—Ç—å - —É–∫–∞–∂–∏ –¥–æ 7 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö.

–í–ê–ñ–ù–û: –í –ø–æ–ª–µ "text" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤–µ—Ä–Ω–∏ –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –ø—É–Ω–∫—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞, –∞ –Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–µ—Ä–Ω–∏ JSON:
{
  "contradictions": [
    {
      "id": "contr_1",
      "type": "temporal",
      "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)",
      "conflictingParagraphs": {
        "paragraph1": {
          "text": "–ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π",
          "value": "–ó–Ω–∞—á–µ–Ω–∏–µ 1"
        },
        "paragraph2": {
          "text": "–ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π", 
          "value": "–ó–Ω–∞—á–µ–Ω–∏–µ 2"
        }
      },
      "severity": "high",
      "recommendation": "–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤)"
    }
  ]
}

–¢–∏–ø—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: 
- "temporal" (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
- "financial" (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ) 
- "quantitative" (–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)
- "legal" (–ø—Ä–∞–≤–æ–≤—ã–µ)
- "procedural" (–ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)
- "logical" (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
- "priority" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)

–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏: "high", "medium", "low"`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: contradictionsPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 8000, // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è Gemini 2.5 Flash
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π:", rawResponse.substring(0, 300));
    
    if (!rawResponse || rawResponse.trim() === '') {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
      return { contradictions: [] };
    }
    
    const parsedResult = extractJsonFromResponse(rawResponse);
    const contradictions = parsedResult.contradictions || [];
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ${contradictions.length}`);
    return { contradictions };
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
      console.log("üîë –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π");
    }
    return { contradictions: [] };
  }
}

// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤
function getPrioritizedItemsForRightsAnalysis(
  allAnalysis: any[],
  paragraphs: Array<{ id: string; text: string }>,
  perspective: 'buyer' | 'supplier',
  maxItems: number = 25
): any[] {
  console.log('üîç –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤...');

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∞–≤ (—Å –≤–µ—Å–∞–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏)
  const rightsKeywords = {
    termination: { 
      keywords: ['—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω', '—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å', '–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞', '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', '–¥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ'], 
      weight: 20 
    },
    liability: { 
      keywords: ['–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–µ—É—Å—Ç–æ–π–∫–∞', '–ø–µ–Ω—è', '—à—Ç—Ä–∞—Ñ', '—É–±—ã—Ç–∫–∏', '–≤–æ–∑–º–µ—â–µ–Ω–∏–µ', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è'], 
      weight: 18 
    },
    modification: { 
      keywords: ['–≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ', '–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', '—É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–µ—Ä–µ—Å–º–æ—Ç—Ä —É—Å–ª–æ–≤–∏–π', '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞'], 
      weight: 16 
    },
    control: { 
      keywords: ['–∫–æ–Ω—Ç—Ä–æ–ª—å', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–∏–Ω—Å–ø–µ–∫—Ü–∏—è', '–∞—É–¥–∏—Ç', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '–Ω–∞–¥–∑–æ—Ä'], 
      weight: 14 
    },
    suspension: { 
      keywords: ['–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞', '–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å', '–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å'], 
      weight: 12 
    },
    refusal: { 
      keywords: ['–æ—Ç–∫–∞–∑', '–æ—Ç–∫–ª–æ–Ω–∏—Ç—å', '–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å', '–≤–µ—Ä–Ω—É—Ç—å'], 
      weight: 10 
    }
  };

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
  const perspectiveBonus = perspective === 'buyer' ? 
    ['–ø–æ—Å—Ç–∞–≤—â–∏–∫ –æ–±—è–∑–∞–Ω', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–µ', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç'] :
    ['–ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω', '–ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤–ø—Ä–∞–≤–µ', '–ø–æ—Å—Ç–∞–≤—â–∏–∫ –º–æ–∂–µ—Ç'];

  const prioritized = allAnalysis
    .map(item => {
      const paragraph = paragraphs.find(p => p.id === item.id);
      const fullText = paragraph?.text || '';
      const analysisText = (item.comment || '') + ' ' + (item.recommendation || '');
      const combinedText = (fullText + ' ' + analysisText).toLowerCase();
      
      let score = 0;

      // 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (item.category === 'risk') score += 15;
      if (item.category === 'deemed_acceptance') score += 12;
      if (item.category === 'partial') score += 8;
      if (item.category === 'checklist') score += 5;

      // 2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –ø—Ä–∞–≤
      Object.values(rightsKeywords).forEach(({ keywords, weight }) => {
        const hasKeyword = keywords.some(keyword => combinedText.includes(keyword));
        if (hasKeyword) score += weight;
      });

      // 3. –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É
      perspectiveBonus.forEach(phrase => {
        if (combinedText.includes(phrase)) score += 8;
      });

      // 4. –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É –∞–Ω–∞–ª–∏–∑–∞ (–±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ = –≤–∞–∂–Ω–µ–µ)
      if (analysisText.length > 100) score += 5;
      if (analysisText.length > 200) score += 3;

      // 5. –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
      const genericPhrases = ['–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å', '—Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É', '—Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å'];
      const hasGeneric = genericPhrases.some(phrase => combinedText.includes(phrase));
      if (hasGeneric && score < 10) score -= 3;

      return {
        id: item.id,
        text: fullText.substring(0, 200) + (fullText.length > 200 ? '...' : ''),
        category: item.category,
        comment: item.comment?.substring(0, 150) || null,
        recommendation: item.recommendation?.substring(0, 100) || null,
        score: Math.max(0, score) // –ù–µ –¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
      };
    })
    .filter(item => item.score > 0) // –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    .sort((a, b) => b.score - a.score); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏

  console.log(`üìä –¢–æ–ø-5 —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:`, 
    prioritized.slice(0, 5).map(p => ({ 
      id: p.id, 
      score: p.score, 
      category: p.category,
      preview: p.comment?.substring(0, 40) + '...' 
    }))
  );

  console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏: –≤—Å–µ–≥–æ ${allAnalysis.length} ‚Üí –æ—Ç–æ–±—Ä–∞–Ω–æ ${Math.min(prioritized.length, maxItems)} –ø—É–Ω–∫—Ç–æ–≤`);

  return prioritized.slice(0, maxItems);
}

// –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –æ–ø–µ—á–∞—Ç–æ–∫ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ
async function findStructuralDefects(
  paragraphs: Array<{ id: string; text: string }>,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any[]> {
  console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤...");
  
  const defects: any[] = [];
  
  // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞
  const clauseMap = new Map<string, { id: string; text: string; number: string }>();
  const clauseNumbers = new Set<string>();
  
  paragraphs.forEach(p => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞ (1., 2.1., 10.2.1. –∏ —Ç.–¥.)
    const match = p.text.match(/^(\d+(?:\.\d+)*\.?)\s/);
    if (match) {
      const clauseNumber = match[1].replace(/\.$/, ''); // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ
      clauseMap.set(clauseNumber, { id: p.id, text: p.text, number: clauseNumber });
      clauseNumbers.add(clauseNumber);
    }
  });

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: ${clauseNumbers.size}`);

  // –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
  const referenceRegex = /(?:–ø|–ø—É–Ω–∫—Ç|–ø—É–Ω–∫—Ç–µ|–ø—É–Ω–∫—Ç—É|–ø—É–Ω–∫—Ç–æ–º|–ø—É–Ω–∫—Ç–∞—Ö|–ø–æ–¥–ø—É–Ω–∫—Ç|–ø–æ–¥–ø—É–Ω–∫—Ç–µ)\.?\s*(\d+(?:\.\d+)*\.?)/gi;
  
  for (const paragraph of paragraphs) {
    const matches = Array.from(paragraph.text.matchAll(referenceRegex));
    
    for (const match of matches) {
      const referencedClauseNumber = match[1].replace(/\.$/, ''); // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
      const fullMatch = match[0];
      
      // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º "–±–∏—Ç—ã–µ" —Å—Å—ã–ª–∫–∏
      if (!clauseNumbers.has(referencedClauseNumber)) {
        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const similarNumbers = Array.from(clauseNumbers).filter(num => 
          num.startsWith(referencedClauseNumber.split('.')[0]) || 
          referencedClauseNumber.startsWith(num.split('.')[0])
        );
        
        defects.push({
          id: `broken_ref_${paragraph.id}_${referencedClauseNumber}`,
          type: 'broken_reference',
          description: `–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç ${referencedClauseNumber} –≤ —Ç–µ–∫—Å—Ç–µ: "${fullMatch}"`,
          severity: 'high',
          recommendation: similarNumbers.length > 0 
            ? `–í–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–ª—Å—è –≤ –≤–∏–¥—É –ø—É–Ω–∫—Ç: ${similarNumbers.slice(0, 3).join(', ')}`
            : `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–Ω–∫—Ç ${referencedClauseNumber}`,
          location: paragraph.id,
          context: paragraph.text.substring(Math.max(0, match.index! - 50), match.index! + 100)
        });
      }
      
      // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ—Å—Å—ã–ª–∫–∏ (–ø—É–Ω–∫—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è —Å–∞–º –Ω–∞ —Å–µ–±—è)
      const currentClauseMatch = paragraph.text.match(/^(\d+(?:\.\d+)*\.?)\s/);
      if (currentClauseMatch) {
        const currentClauseNumber = currentClauseMatch[1].replace(/\.$/, '');
        if (referencedClauseNumber === currentClauseNumber) {
          defects.push({
            id: `self_ref_${paragraph.id}`,
            type: 'self_reference',
            description: `–ü—É–Ω–∫—Ç ${currentClauseNumber} —Å—Å—ã–ª–∞–µ—Ç—Å—è —Å–∞–º –Ω–∞ —Å–µ–±—è`,
            severity: 'medium',
            recommendation: `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É–Ω–∫—Ç`,
            location: paragraph.id,
            context: paragraph.text.substring(0, 200)
          });
        }
      }
    }
  }

  // –®–∞–≥ 5: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  if (defects.length < 10) { // –í—ã–∑—ã–≤–∞–µ–º AI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
    try {
      const aiDefects = await findLogicalDefectsWithAI(paragraphs, clauseMap, perspective);
      defects.push(...aiDefects);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:", error);
    }
  }

  // –®–∞–≥ 6: –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
  const cyclicDefects = findCyclicReferences(paragraphs, clauseMap);
  defects.push(...cyclicDefects);

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤: ${defects.length}`);
  return defects;
}

// AI-–∞–Ω–∞–ª–∏–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
async function findLogicalDefectsWithAI(
  paragraphs: Array<{ id: string; text: string }>,
  clauseMap: Map<string, any>,
  perspective: 'buyer' | 'supplier'
): Promise<any[]> {
  // –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
  const suspiciousParagraphs = paragraphs.filter(p => {
    const text = p.text.toLowerCase();
    return text.includes('–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏–π –ø.') || 
           text.includes('–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø.') ||
           text.includes('—Å–æ–≥–ª–∞—Å–Ω–æ –ø.') ||
           (text.includes('–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å') && text.includes('–ø.'));
  });

  if (suspiciousParagraphs.length === 0) return [];

  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤.`
  });

  const logicalPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Å—Å—ã–ª–∫–∞—Ö:

–ü–£–ù–ö–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
${suspiciousParagraphs.map(p => `${p.id}: ${p.text.substring(0, 300)}`).join('\n\n')}

–î–û–°–¢–£–ü–ù–´–ï –ü–£–ù–ö–¢–´ –í –î–û–ì–û–í–û–†–ï:
${Array.from(clauseMap.keys()).sort().join(', ')}

–ù–∞–π–¥–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:
1. –ü—É–Ω–∫—Ç—ã –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è —Å–∞–º–∏ –Ω–∞ —Å–µ–±—è –≤–º–µ—Å—Ç–æ –ø—É–Ω–∫—Ç–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
2. –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ —Å–º—ã—Å–ª—É –ø—É–Ω–∫—Ç—ã
3. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Å—ã–ª–æ–∫ —Ç–∞–º, –≥–¥–µ –æ–Ω–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã

–í–µ—Ä–Ω–∏ JSON:
{
  "logicalDefects": [
    {
      "id": "logic_error_1",
      "type": "logical_error",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏",
      "severity": "high",
      "recommendation": "–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å",
      "location": "id –ø—É–Ω–∫—Ç–∞"
    }
  ]
}`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: logicalPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 4000,
      },
    });

    const rawResponse = result.response.text();
    const parsed = extractJsonFromResponse(rawResponse);
    return parsed.logicalDefects || [];
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:", error);
    return [];
  }
}

// –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
function findCyclicReferences(
  paragraphs: Array<{ id: string; text: string }>,
  clauseMap: Map<string, any>
): any[] {
  const defects: any[] = [];
  const referenceGraph = new Map<string, string[]>();

  // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ —Å—Å—ã–ª–æ–∫
  paragraphs.forEach(p => {
    const currentMatch = p.text.match(/^(\d+(?:\.\d+)*\.?)\s/);
    if (!currentMatch) return;
    
    const currentClause = currentMatch[1].replace(/\.$/, '');
    const references: string[] = [];
    
    const referenceRegex = /(?:–ø|–ø—É–Ω–∫—Ç|–ø—É–Ω–∫—Ç–µ|–ø—É–Ω–∫—Ç—É)\.?\s*(\d+(?:\.\d+)*\.?)/gi;
    let match;
    while ((match = referenceRegex.exec(p.text)) !== null) {
      const refClause = match[1].replace(/\.$/, '');
      if (refClause !== currentClause) {
        references.push(refClause);
      }
    }
    
    if (references.length > 0) {
      referenceGraph.set(currentClause, references);
    }
  });

  // –ò—â–µ–º —Ü–∏–∫–ª—ã (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ A->B->A)
  for (const [clause, refs] of Array.from(referenceGraph.entries())) {
    for (const ref of refs) {
      const refRefs = referenceGraph.get(ref);
      if (refRefs && refRefs.includes(clause)) {
        defects.push({
          id: `cycle_${clause}_${ref}`,
          type: 'cyclic_reference',
          description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: –ø—É–Ω–∫—Ç ${clause} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ ${ref}, –∫–æ—Ç–æ—Ä—ã–π —Å—Å—ã–ª–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ ${clause}`,
          severity: 'medium',
          recommendation: `–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ ${clause} –∏ ${ref}`,
          location: clause
        });
      }
    }
  }

  return defects;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤ —Å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ–º (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
function analyzeRightsImbalanceProgrammatically(
  classifiedClauses: Array<{ id: string; party: string; type: string }>,
  allParagraphs: Array<{ id: string; text: string }>
): any {
  console.log(`üîç –®–∞–≥ 5.2: –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞...`);
  
  const rightsImbalance: any[] = [];
  const buyerClauses = classifiedClauses.filter(c => c.party === 'buyer');
  const supplierClauses = classifiedClauses.filter(c => c.party === 'supplier');
  const bothClauses = classifiedClauses.filter(c => c.party === 'both');

  const typeNames = {
    termination: "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
    modification: "–∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π",
    liability: "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
    control: "–∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –ø—Ä–∏–µ–º–∫–∏",
    procedural: "–ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤"
  };

  // --- 1. –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò (LIABILITY) ---
  const buyerLiability = buyerClauses.filter(c => c.type === 'liability');
  const supplierLiability = supplierClauses.filter(c => c.type === 'liability');
  
  if (supplierLiability.length > 0 || buyerLiability.length > 0) {
    const buyerPenalty = extractFinancialValue(buyerLiability.map(c => allParagraphs.find(p => p.id === c.id)?.text || ''));
    const supplierPenalty = extractFinancialValue(supplierLiability.map(c => allParagraphs.find(p => p.id === c.id)?.text || ''));
    
    let isImbalanced = false;
    let description = `–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplierLiability.length}, –ø—Ä–∞–≤ –ü–æ–∫—É–ø–∞—Ç–µ–ª—è: ${buyerLiability.length}.`;
    let severity = 'low';

    if (supplierPenalty > buyerPenalty * 2 && buyerPenalty >= 0) {
      isImbalanced = true;
      description = `–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: —Å–∞–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ü–æ—Å—Ç–∞–≤—â–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ–Ω—è ${supplierPenalty}%), –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å–∞–Ω–∫—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ü–æ–∫—É–ø–∞—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—É—Å—Ç–æ–π–∫–∞ ${buyerPenalty}%).`;
      severity = 'high';
    } else if (supplierLiability.length > buyerLiability.length + 1) {
        isImbalanced = true;
        description = `–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –ø—Ä–∞–≤–∞—Ö –Ω–∞ –≤–∑—ã—Å–∫–∞–Ω–∏–µ: —É –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ (${supplierLiability.length}) –±–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Å–∞–Ω–∫—Ü–∏–π, —á–µ–º —É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è (${buyerLiability.length}).`
        severity = 'medium';
    }

    if (isImbalanced) {
      rightsImbalance.push({
        id: `imbalance_liability`, type: 'liability', description, severity,
        buyerRights: buyerLiability.length, supplierRights: supplierLiability.length,
        recommendation: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ—É—Å—Ç–æ–µ–∫, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω.`,
        buyerRightsClauses: buyerLiability.map(c => allParagraphs.find(p => p.id === c.id)),
        supplierRightsClauses: supplierLiability.map(c => allParagraphs.find(p => p.id === c.id)),
      });
    }
  }

  // --- 2. –ê–ù–ê–õ–ò–ó –î–†–£–ì–ò–• –ö–ê–¢–ï–ì–û–†–ò–ô (Modification, Termination, Control) ---
  const typesToAnalyze: Array<keyof typeof typeNames> = ['modification', 'termination', 'control'];
  
  typesToAnalyze.forEach(type => {
      const buyerRights = buyerClauses.filter(c => c.type === type);
      const supplierRights = supplierClauses.filter(c => c.type === type);
      
      // –ò—â–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –µ—Å—Ç—å –ø—Ä–∞–≤–∞, –∞ —É –¥—Ä—É–≥–æ–π –Ω–µ—Ç, –∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞
      if (Math.abs(buyerRights.length - supplierRights.length) > 0 && (buyerRights.length === 0 || supplierRights.length === 0)) {
           const favoredParty = buyerRights.length > supplierRights.length ? "–ü–æ–∫—É–ø–∞—Ç–µ–ª—è" : "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞";
           const favoredPartyRus = favoredParty === "–ü–æ–∫—É–ø–∞—Ç–µ–ª—è" ? "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" : "–ü–æ—Å—Ç–∞–≤—â–∏–∫";
           
           rightsImbalance.push({
              id: `imbalance_${type}`, type: type,
              description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Å—Ñ–µ—Ä–µ ${typeNames[type]}: ${favoredPartyRus} –∏–º–µ–µ—Ç ${Math.max(buyerRights.length, supplierRights.length)} –ø—Ä–∞–≤(–æ) –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ —É –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏—Ö –Ω–µ—Ç.`,
              severity: type === 'modification' ? 'high' : 'medium',
              buyerRights: buyerRights.length, supplierRights: supplierRights.length,
              recommendation: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ ${typeNames[type]} –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.`,
              buyerRightsClauses: buyerRights.map(c => allParagraphs.find(p => p.id === c.id)),
              supplierRightsClauses: supplierRights.map(c => allParagraphs.find(p => p.id === c.id)),
           });
      }
  });
  
  const overallConclusion = `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${rightsImbalance.length} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤.`;
  return { rightsImbalance, overallConclusion };
}

// –§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø—Ä–∞–≤ –∏–∑ —á–∞–Ω–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function aggregateAndAnalyzeRights(chunkResults: any[], allParagraphs: Array<{ id: string; text: string }>): any {
  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –ø—Ä–∞–≤ –∏–∑ ${chunkResults.length} —á–∞–Ω–∫–æ–≤`);
  
  let totalBuyerRights = 0;
  let totalSupplierRights = 0;
  const allRightsDetails: string[] = [];
  const allClassifiedClauses: Array<{ id: string; party: string; type: string }> = [];
  
  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
  chunkResults.forEach((chunkResult, index) => {
    if (chunkResult && chunkResult.chunkRightsAnalysis) {
      const rightsAnalysis = chunkResult.chunkRightsAnalysis;
      
      totalBuyerRights += rightsAnalysis.buyerRightsCount || 0;
      totalSupplierRights += rightsAnalysis.supplierRightsCount || 0;
      
      if (rightsAnalysis.rightsDetails && Array.isArray(rightsAnalysis.rightsDetails)) {
        allRightsDetails.push(...rightsAnalysis.rightsDetails);
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (rightsAnalysis.classifiedClauses && Array.isArray(rightsAnalysis.classifiedClauses)) {
        allClassifiedClauses.push(...rightsAnalysis.classifiedClauses);
      }
      
      console.log(`  ‚úÖ –ß–∞–Ω–∫ ${index + 1}: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ${rightsAnalysis.buyerRightsCount || 0}, –ø–æ—Å—Ç–∞–≤—â–∏–∫ ${rightsAnalysis.supplierRightsCount || 0}`);
    } else {
      console.warn(`  ‚ö†Ô∏è –ß–∞–Ω–∫ ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chunkRightsAnalysis`);
    }
  });
  
  console.log(`üìä –ò—Ç–æ–≥–æ –ø—Ä–∞–≤: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ${totalBuyerRights}, –ø–æ—Å—Ç–∞–≤—â–∏–∫ ${totalSupplierRights}`);
  
  // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  if (allClassifiedClauses.length > 0) {
    console.log(`üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Å ${allClassifiedClauses.length} –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏`);
    // –ü–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ allParagraphs, –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
    return analyzeRightsImbalanceProgrammatically(allClassifiedClauses, allParagraphs);
  }
  
  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const rightsImbalance: any[] = [];
  let overallConclusion = "";
  
  if (totalBuyerRights === 0 && totalSupplierRights === 0) {
    overallConclusion = "–í –¥–æ–≥–æ–≤–æ—Ä–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —è–≤–Ω—ã—Ö –ø—Ä–∞–≤ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞.";
  } else {
    const totalRights = totalBuyerRights + totalSupplierRights;
    const buyerPercentage = Math.round((totalBuyerRights / totalRights) * 100);
    const supplierPercentage = Math.round((totalSupplierRights / totalRights) * 100);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å
    const difference = Math.abs(totalBuyerRights - totalSupplierRights);
    const maxRights = Math.max(totalBuyerRights, totalSupplierRights);
    const imbalancePercentage = maxRights > 0 ? Math.round((difference / maxRights) * 100) : 0;
    
    if (imbalancePercentage > 50) {
      const favoredParty = totalBuyerRights > totalSupplierRights ? "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è" : "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞";
      const severity = imbalancePercentage > 75 ? "high" : "medium";
      
      rightsImbalance.push({
        id: "imbalance_1",
        type: "general_rights",
        description: `–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤ –≤ –ø–æ–ª—å–∑—É ${favoredParty}. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${totalBuyerRights} –ø—Ä–∞–≤ (${buyerPercentage}%), –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${totalSupplierRights} –ø—Ä–∞–≤ (${supplierPercentage}%).`,
        buyerRights: totalBuyerRights,
        supplierRights: totalSupplierRights,
        severity: severity,
        recommendation: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—Ç–æ—Ä–æ–Ω, –¥–æ–±–∞–≤–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è ${favoredParty === "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è" ? "–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" : "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è"}.`
      });
      
      overallConclusion = `–û–±–Ω–∞—Ä—É–∂–µ–Ω ${severity === "high" ? "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" : "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π"} –¥–∏—Å–±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤ –≤ –ø–æ–ª—å–∑—É ${favoredParty}. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${buyerPercentage}% –∫ ${supplierPercentage}%.`;
    } else {
      overallConclusion = `–ü—Ä–∞–≤–∞ —Å—Ç–æ—Ä–æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${totalBuyerRights} –ø—Ä–∞–≤ (${buyerPercentage}%), –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${totalSupplierRights} –ø—Ä–∞–≤ (${supplierPercentage}%).`;
    }
  }
  
  console.log(`‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ ${rightsImbalance.length} –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤`);
  
  return {
    rightsImbalance,
    overallConclusion,
    totalBuyerRights,
    totalSupplierRights,
    allRightsDetails
  };
}

// –®–∞–≥ 5.1: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º –ò —Ç–∏–ø—É –ø—Ä–∞–≤–∞ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
async function classifyClauseParty(
  chunk: any[], // –ß–∞–Ω–∫ –∏–∑ 5 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
  perspective: 'buyer' | 'supplier'
): Promise<Array<{ id: string; party: 'buyer' | 'supplier' | 'both' | 'neutral'; type: string }>> {
  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏.`
  });

  const classifyPrompt = `–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –±—ã—Ç—å –°–¢–†–û–ì–ò–ú —é—Ä–∏—Å—Ç–æ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è –∏–∑ —Å—Ç–æ—Ä–æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –Ω–µ–≥–æ –†–ï–ê–õ–¨–ù–û–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û –∏–ª–∏ –ø—Ä–∞–≤–æ.

–ü–£–ù–ö–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
${chunk.map(item => `- ${item.id}: ${item.text}`).join('\n\n')}

–î–ª—è –ö–ê–ñ–î–û–ì–û –ø—É–Ω–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –í–´–ì–û–î–û–ü–†–ò–û–ë–†–ï–¢–ê–¢–ï–õ–Ø –∏ –¢–ò–ü –ø—Ä–∞–≤–∞.
- "buyer": –ü—É–Ω–∫—Ç –¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–û–ï, –°–ò–õ–¨–ù–û–ï –ø—Ä–∞–≤–æ –∏–ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ü–æ–∫—É–ø–∞—Ç–µ–ª—é.
- "supplier": –ü—É–Ω–∫—Ç –¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–û–ï, –°–ò–õ–¨–ù–û–ï –ø—Ä–∞–≤–æ –∏–ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ü–æ—Å—Ç–∞–≤—â–∏–∫—É.
- "neutral": –ü—É–Ω–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∏–ª–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –û–ë–Ø–ó–ê–ù–ù–û–°–¢–¨ –±–µ–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —è–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥—ä–µ–∑–¥–Ω—ã–µ –ø—É—Ç–∏").
- "both": –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–∞–∂–¥–∞—è –∏–∑ —Å—Ç–æ—Ä–æ–Ω –≤–ø—Ä–∞–≤–µ...").

–ü–†–ò–ú–ï–†–´ –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:
- –¢–µ–∫—Å—Ç: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ..." -> party: "neutral" (—ç—Ç–æ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞, –∞ –Ω–µ —Å–∏–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ –ü–æ–∫—É–ø–∞—Ç–µ–ª—è)
- –¢–µ–∫—Å—Ç: "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞ —Å–≤–æ–π —Å—á–µ—Ç..." -> party: "neutral" (–ø—Ä–∞–≤–æ —Å–ª–∞–±–æ–µ, –ø–æ—á—Ç–∏ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ, –Ω–µ –¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞)
- –¢–µ–∫—Å—Ç: "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¢–ù –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∏–µ–º–∫—É –ø–æ –∫–∞—á–µ—Å—Ç–≤—É" -> party: "supplier" (—ç—Ç–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)

–ò—Å–ø–æ–ª—å–∑—É–π 5 –º–µ—Ç–æ–∫ –¥–ª—è –¢–ò–ü–ê –ø—Ä–∞–≤–∞:
- "termination": –ü—Ä–∞–≤–æ –Ω–∞ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞.
- "modification": –ü—Ä–∞–≤–æ –Ω–∞ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π (—Ü–µ–Ω—ã, —Å—Ä–æ–∫–æ–≤).
- "liability": –ü—Ä–∞–≤–æ –Ω–∞ –≤–∑—ã—Å–∫–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤, –ø–µ–Ω–µ–π, –Ω–µ—É—Å—Ç–æ–µ–∫, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤.
- "control": –ü—Ä–∞–≤–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–∏–µ–º–∫—É, –æ—Ç–∫–∞–∑ –æ—Ç —Ç–æ–≤–∞—Ä–∞.
- "procedural": –î—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ (–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã).

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞:
[
  { "id": "p52", "party": "buyer", "type": "liability" },
  { "id": "p75", "party": "buyer", "type": "termination" },
  { "id": "p44", "party": "supplier", "type": "modification" }
]`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: classifyPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.0,
        maxOutputTokens: 1000,
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });
    let rawResponse = result.response.text();
    if (!rawResponse || rawResponse.trim().length === 0) {
      await new Promise(resolve => setTimeout(resolve, 1500));
      try {
        const secondTryResult = await model.generateContent({
          contents: [{ role: "user", parts: [{ text: classifyPrompt }] }],
          generationConfig: {
            responseMimeType: "application/json",
            temperature: 0.0,
            maxOutputTokens: 1000,
            topP: 0.95,
            topK: 64,
          },
          safetySettings: [
            {
              category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
              threshold: HarmBlockThreshold.BLOCK_NONE,
            },
          ],
        });
        rawResponse = secondTryResult.response.text();
      } catch (retryError) {}
    }
    if (rawResponse && rawResponse.trim().length > 0) {
      const parsed = extractJsonFromResponse(rawResponse);
      return Array.isArray(parsed) ? parsed : [];
    } else {
      return [];
    }
  } catch (error) {
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
    }
    return [];
  }
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞/—Å—É–º–º—ã ---
function extractFinancialValue(texts: string[]): number {
  let maxValue = 0;
  // –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
  const valueRegex = /(\d[\d\s,.]*)\s*(%|—Ä—É–±)/g;

  texts.forEach(text => {
    const matches = Array.from(text.matchAll(valueRegex));
    matches.forEach(match => {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const numericString = match[1].replace(/\s/g, '').replace(',', '.');
      const numericValue = parseFloat(numericString);
      if (!isNaN(numericValue) && numericValue > maxValue) {
        // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ —ç—Ç–æ —Ä—É–±–ª–∏, –∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 1000, —Å—á–∏—Ç–∞–µ–º –µ–µ –∑–Ω–∞—á–∏–º–æ–π. –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—á–∏–º—ã.
        if (match[2] === '%' || (match[2] === '—Ä—É–±' && numericValue > 1000)) {
           maxValue = numericValue;
        }
      }
    });
  });
  return maxValue;
}

// --- –ù–æ–≤—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ ---
function analyzeRightsImbalanceSmart(
  classifiedClauses: Array<{ id: string; party: string; type: string }>,
  allParagraphs: Array<{ id: string; text: string }>
): any {
  const rightsImbalance: any[] = [];
  // –î–æ–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç –∫ –∫–∞–∂–¥–æ–º—É classifiedClause –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const clausesWithText = classifiedClauses.map(c => ({
    ...c,
    text: (allParagraphs.find(p => p.id === c.id)?.text || "")
  }));
  const buyerClauses = clausesWithText.filter(c => c.party === 'buyer');
  const supplierClauses = clausesWithText.filter(c => c.party === 'supplier');

  // --- –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò (LIABILITY) ---
  const buyerLiability = buyerClauses.filter(c => c.type === 'liability');
  const supplierLiability = supplierClauses.filter(c => c.type === 'liability');
  if (supplierLiability.length > buyerLiability.length) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const buyerPenaltyMatch = buyerLiability[0]?.text.match(/(\d[\d,\.]*)\s*%/);
    const supplierPenaltyMatch = supplierLiability[0]?.text.match(/(\d[\d,\.]*)\s*%/);
    const buyerPenalty = buyerPenaltyMatch ? parseFloat(buyerPenaltyMatch[1].replace(',', '.')) : 0;
    const supplierPenalty = supplierPenaltyMatch ? parseFloat(supplierPenaltyMatch[1].replace(',', '.')) : 0;
    let description = `–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Å—Ñ–µ—Ä–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplierLiability.length}, –ø—Ä–∞–≤ –ü–æ–∫—É–ø–∞—Ç–µ–ª—è: ${buyerLiability.length}.`;
    if (supplierPenalty > buyerPenalty * 2 && supplierPenalty > 0) {
      description += ` –ö–ª—é—á–µ–≤–æ–π —Ä–∏—Å–∫: –ø–µ–Ω—è –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –æ–ø–ª–∞—Ç—ã –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (${supplierPenalty}%) –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–º (${buyerPenalty}%).`;
    }
    rightsImbalance.push({
      id: `imbalance_liability`,
      type: 'liability',
      description: description,
      buyerRights: buyerLiability.length,
      supplierRights: supplierLiability.length,
      severity: supplierPenalty > buyerPenalty * 2 ? 'high' : 'medium',
      recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ—É—Å—Ç–æ–µ–∫.'
    });
  }

  // --- –ê–ù–ê–õ–ò–ó –ü–†–ê–í –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–ï –£–°–õ–û–í–ò–ô (MODIFICATION) ---
  const supplierModification = supplierClauses.filter(c => c.type === 'modification');
  if (supplierModification.length > 0) {
    rightsImbalance.push({
      id: `imbalance_modification`,
      type: 'modification',
      description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å: –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏–º–µ–µ—Ç ${supplierModification.length} –ø—Ä–∞–≤(–æ) –Ω–∞ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏), –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ —É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è —Ç–∞–∫–∏—Ö –ø—Ä–∞–≤ –Ω–µ—Ç.`,
      buyerRights: 0,
      supplierRights: supplierModification.length,
      severity: 'high',
      recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–∞–≤–∞ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π.'
    });
  }

  // --- –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è termination, control –∏ –¥—Ä. ---
  // termination
  const supplierTermination = supplierClauses.filter(c => c.type === 'termination');
  if (supplierTermination.length > 0) {
    rightsImbalance.push({
      id: `imbalance_termination`,
      type: 'termination',
      description: `–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏–º–µ–µ—Ç ${supplierTermination.length} –ø—Ä–∞–≤(–æ) –Ω–∞ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞, —á—Ç–æ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–∏—Å–∫ –¥–ª—è –ü–æ–∫—É–ø–∞—Ç–µ–ª—è.`,
      buyerRights: 0,
      supplierRights: supplierTermination.length,
      severity: 'medium',
      recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è.'
    });
  }
  // control
  const buyerControl = buyerClauses.filter(c => c.type === 'control');
  if (buyerControl.length > 0 && supplierClauses.filter(c => c.type === 'control').length === 0) {
    rightsImbalance.push({
      id: `imbalance_control`,
      type: 'control',
      description: `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç ${buyerControl.length} –ø—Ä–∞–≤(–æ) –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º –¥–ª—è –Ω–µ–≥–æ.`,
      buyerRights: buyerControl.length,
      supplierRights: 0,
      severity: 'low',
      recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π.'
    });
  }
  // procedural
  // ... (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è procedural)

  // --- –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è/—Å–ø–æ—Ä–Ω—ã–µ –ø—É–Ω–∫—Ç—ã ---
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –ø—Ä–∞–≤ –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
  const duplicates: string[] = [];
  buyerClauses.forEach(bc => {
    supplierClauses.forEach(sc => {
      if (bc.text && sc.text && bc.text.trim() === sc.text.trim()) {
        duplicates.push(bc.text.trim());
      }
    });
  });
  if (duplicates.length > 0) {
    rightsImbalance.push({
      id: 'duplicate_rights',
      type: 'duplicates',
      description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —É –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω: ${duplicates.slice(0,3).map(t => '"'+t.substring(0,60)+'..."').join(', ')}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —ç—Ç–∏—Ö –ø—É–Ω–∫—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–π —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –∏ —Å–ø–æ—Ä–æ–≤.`,
      buyerRights: duplicates.length,
      supplierRights: duplicates.length,
      severity: 'medium',
      recommendation: '–£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—É–Ω–∫—Ç–æ–≤.'
    });
  }

  const overallConclusion = `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${rightsImbalance.length} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤.`;
  return { rightsImbalance, overallConclusion };
}

// –®–∞–≥ 5.2: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ (—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)
async function analyzeRightsImbalance(
  extractedRights: { buyerRightsList: string[], supplierRightsList: string[] },
  perspective: 'buyer' | 'supplier'
): Promise<any> {
  console.log(`üîç –®–∞–≥ 5.2: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤`);
  
  if (extractedRights.buyerRightsList.length === 0 && extractedRights.supplierRightsList.length === 0) {
    return { 
      rightsImbalance: [], 
      overallConclusion: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞." 
    };
  }

  const keyToUse = keyPool.getNextKey();
  const genAI = new GoogleGenerativeAI(keyToUse);
  const model = genAI.getGenerativeModel({ 
    model: MODEL_NAME,
    systemInstruction: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –≤ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö –ø–æ—Å—Ç–∞–≤–∫–∏.`
  });

  const analysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ —Å—Ç–æ—Ä–æ–Ω –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã.

–ü–†–ê–í–ê –ü–û–ö–£–ü–ê–¢–ï–õ–Ø (${extractedRights.buyerRightsList.length}):
${extractedRights.buyerRightsList.map((right, i) => `${i + 1}. ${right}`).join('\n')}

–ü–†–ê–í–ê –ü–û–°–¢–ê–í–©–ò–ö–ê (${extractedRights.supplierRightsList.length}):
${extractedRights.supplierRightsList.map((right, i) => `${i + 1}. ${right}`).join('\n')}

–ù–∞–π–¥–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã –≤ –æ–±–ª–∞—Å—Ç—è—Ö:
- termination_rights (–ø—Ä–∞–≤–∞ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è)
- modification_rights (–ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π)
- liability_rights (–ø—Ä–∞–≤–∞ –≤–∑—ã—Å–∫–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤/–Ω–µ—É—Å—Ç–æ–µ–∫)
- suspension_rights (–ø—Ä–∞–≤–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
- control_rights (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞)

–í–µ—Ä–Ω–∏ JSON:
{
  "rightsImbalance": [
    {
      "id": "imbalance_1",
      "type": "liability_rights",
      "description": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∞–≤",
      "buyerRights": ${extractedRights.buyerRightsList.length},
      "supplierRights": ${extractedRights.supplierRightsList.length},
      "severity": "high",
      "recommendation": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é"
    }
  ],
  "overallConclusion": "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –æ —Ç–æ–º, –≤ —á—å—é —Å—Ç–æ—Ä–æ–Ω—É —Å–º–µ—â–µ–Ω –±–∞–ª–∞–Ω—Å –∏ –≤ –∫–∞–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö"
}

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã.`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: analysisPrompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        temperature: 0.1,
        maxOutputTokens: 3000, // –ï—â–µ –º–µ–Ω—å—à–µ –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        topP: 0.95,
        topK: 64,
      },
      safetySettings: [
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_NONE,
        },
      ],
    });

    const rawResponse = result.response.text();
    console.log(`üìä –®–∞–≥ 5.2: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${rawResponse.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    const parsed = extractJsonFromResponse(rawResponse);
    const rightsImbalance = parsed.rightsImbalance || [];
    const overallConclusion = parsed.overallConclusion || "–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.";
    
    console.log(`‚úÖ –®–∞–≥ 5.2: –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤: ${rightsImbalance.length}`);
    return { rightsImbalance, overallConclusion };
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞:", error);
    if (error instanceof Error && error.message.includes('429')) {
      keyPool.markKeyAsExhausted(keyToUse);
    }
    return { 
      rightsImbalance: [], 
      overallConclusion: "–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏." 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ (–ø–æ–¥—Ö–æ–¥ "–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å")
async function findRightsImbalance(
  allAnalysis: any[],
  paragraphs: Array<{ id: string; text: string }>,
  perspective: 'buyer' | 'supplier',
  onProgress: (message: string) => void
): Promise<any> {
  console.log(`üîÑ –ù–ê–ß–ê–õ–û —Ñ—É–Ω–∫—Ü–∏–∏ findRightsImbalance: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ—Ç–æ–¥–æ–º "–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å"`);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é
  const rightsRelatedItems = getPrioritizedItemsForRightsAnalysis(allAnalysis, paragraphs, perspective);
  if (rightsRelatedItems.length < 3) {
    console.log("üîç –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤");
    return { rightsImbalance: [], overallConclusion: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏." };
  }
  try {
    // –®–ê–ì 5.1: –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—ã –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ "–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å")
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –®–∞–≥–∞ 5.1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—É–Ω–∫—Ç–æ–≤ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º`);
    const CHUNK_SIZE = 5;
    let classifiedClauses: any[] = [];
    const totalChunks = Math.ceil(rightsRelatedItems.length / CHUNK_SIZE);
    for (let i = 0; i < rightsRelatedItems.length; i += CHUNK_SIZE) {
      const chunk = rightsRelatedItems.slice(i, i + CHUNK_SIZE);
      console.log(`  -> –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á–∞–Ω–∫ ‚Ññ${Math.floor(i / CHUNK_SIZE) + 1} (–ø—É–Ω–∫—Ç—ã ${i + 1}-${i + chunk.length})`);
      const classifications = await classifyClauseParty(chunk, perspective);
      if (classifications.length > 0) {
        classifiedClauses.push(...classifications);
        console.log(`  ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ ${classifications.length} –ø—É–Ω–∫—Ç–æ–≤ –≤ —á–∞–Ω–∫–µ ‚Ññ${Math.floor(i / CHUNK_SIZE) + 1}`);
      } else {
        console.warn(`  ‚ö†Ô∏è –ß–∞–Ω–∫ ‚Ññ${Math.floor(i / CHUNK_SIZE) + 1} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
      // --- –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–∞–ø–∞ 5 ---
      const percent = Math.round(((i + CHUNK_SIZE) / rightsRelatedItems.length) * 100);
      onProgress(`–≠—Ç–∞–ø 5/7: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤... ${Math.min(percent, 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    }
    // –ü–†–û–ì–†–ê–ú–ú–ù–û –°–û–ó–î–ê–ï–ú –°–ü–ò–°–ö–ò –ü–†–ê–í –ù–ê –û–°–ù–û–í–ï –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
    const extractedRights = { buyerRightsList: [] as string[], supplierRightsList: [] as string[] };
    classifiedClauses.forEach(classified => {
      const originalItem = rightsRelatedItems.find(item => item.id === classified.id);
      if (originalItem) {
        const summary = `${originalItem.text.substring(0, 80)}...`;
        if (classified.party === 'buyer') {
          extractedRights.buyerRightsList.push(summary);
        } else if (classified.party === 'supplier') {
          extractedRights.supplierRightsList.push(summary);
        }
      }
    });
    console.log(`‚úÖ –®–∞–≥ 5.1 –ó–ê–í–ï–†–®–ï–ù: –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: ${extractedRights.buyerRightsList.length}, –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${extractedRights.supplierRightsList.length}`);
    if (extractedRights.buyerRightsList.length === 0 && extractedRights.supplierRightsList.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞");
      return { 
        rightsImbalance: [], 
        overallConclusion: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞." 
      };
    }
    // –®–ê–ì 5.2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –®–∞–≥–∞ 5.2: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞`);
    onProgress(`–≠—Ç–∞–ø 5/7: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤... 100% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    const imbalanceResult = await analyzeRightsImbalance(extractedRights, perspective);
    console.log(`‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï —Ñ—É–Ω–∫—Ü–∏–∏ findRightsImbalance: –ê–Ω–∞–ª–∏–∑ "–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å" –∑–∞–≤–µ—Ä—à–µ–Ω`);
    return imbalanceResult;
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ—Ç–æ–¥–æ–º '–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å':", error);
    return { 
      rightsImbalance: [
        {
          id: "error_fallback_1",
          type: "control_rights", 
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ –º–µ—Ç–æ–¥–µ '–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å'",
          buyerRights: 0,
          supplierRights: 0,
          severity: "low",
          recommendation: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏"
        }
      ],
      overallConclusion: "–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ—Ç–æ–¥–æ–º '–ò–∑–≤–ª–µ–∫–∏-–∏-–ø–æ–º–µ—Ç—å' –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞."
    };
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏
function splitIntoSpans(text: string): Array<{ id: string; text: string }> {
  const lines = text.split(/\n/);
  const paragraphs: string[] = [];
  let currentParagraph = '';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
  const isNewSection = (line: string): boolean => {
    const trimmed = line.trim();
    // –ù–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (1., 2.1., etc.)
    if (/^\d+\.(\d+\.)*\s/.test(trimmed)) return true;
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if (/^[–ê-–Ø–Å\s]{3,}$/.test(trimmed) && trimmed.length < 100) return true;
    // –°—Ç–∞—Ç—å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
    if (/^(—Å—Ç–∞—Ç—å—è|—Ä–∞–∑–¥–µ–ª|–≥–ª–∞–≤–∞|–ø—É–Ω–∫—Ç)\s*\d+/i.test(trimmed)) return true;
    return false;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–±–∑–∞—Ü–∞
  const isImportantContent = (text: string): boolean => {
    const trimmed = text.trim();
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (trimmed.length < CHUNKING_CONFIG.MIN_CONTENT_LENGTH) return false;
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (/^[–ê-–Ø–Å\s]{3,}$/.test(trimmed)) return false;
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏
    if (/^[\d\s\.\-\/]+$/.test(trimmed)) return false;
    return true;
  };

  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (trimmedLine === '') {
      if (currentParagraph.trim() && isImportantContent(currentParagraph)) {
        paragraphs.push(currentParagraph.trim());
        currentParagraph = '';
      }
      continue;
    }

    // –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–±–∑–∞—Ü –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
    if (isNewSection(trimmedLine)) {
      if (currentParagraph.trim() && isImportantContent(currentParagraph)) {
        paragraphs.push(currentParagraph.trim());
      }
      currentParagraph = trimmedLine;
    } else {
      // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–∑–∞—Ü–∞
      if (currentParagraph) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª
        const needsSpace = !currentParagraph.endsWith(' ') && 
                          !trimmedLine.startsWith('(') && 
                          !currentParagraph.endsWith('(');
        currentParagraph += (needsSpace ? ' ' : '') + trimmedLine;
      } else {
        currentParagraph = trimmedLine;
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤
    if (currentParagraph.length > CHUNKING_CONFIG.MAX_PARAGRAPH_LENGTH) {
      // –ò—â–µ–º —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
      const sentences = currentParagraph.split(/[.!?]+/);
      if (sentences.length > 1) {
        const midPoint = Math.floor(sentences.length / 2);
        const firstPart = sentences.slice(0, midPoint).join('.') + '.';
        const secondPart = sentences.slice(midPoint).join('.').trim();
        
        if (firstPart.trim() && isImportantContent(firstPart)) {
          paragraphs.push(firstPart.trim());
        }
        currentParagraph = secondPart;
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
  if (currentParagraph.trim() && isImportantContent(currentParagraph)) {
    paragraphs.push(currentParagraph.trim());
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –Ω—É–º–µ—Ä—É–µ–º –∞–±–∑–∞—Ü—ã
  const filteredParagraphs = paragraphs
    .filter(p => isImportantContent(p))
    .map((paragraph, index) => ({
      id: `p${index + 1}`,
      text: paragraph,
    }));

  console.log(`üìù –î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–±–∏—Ç –Ω–∞ ${filteredParagraphs.length} —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤`);
  
  return filteredParagraphs;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
export async function analyzeContractWithGemini(
  contractText: string,
  checklistText: string,
  riskText: string,
  perspective: 'buyer' | 'supplier' = 'buyer',
  onProgress: (message: string) => void = () => {}
): Promise<{ contractParagraphs: ContractParagraph[], missingRequirements: ContractParagraph[], ambiguousConditions: ContractParagraph[], structuralAnalysis: any, contradictions: any[], rightsImbalance: any[], structuralDefects: any[] }> {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ (${keyPool.getKeyCount()} API –∫–ª—é—á–µ–π)`);
  
  try {
    // –≠—Ç–∞–ø 1: –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤
    onProgress("–≠—Ç–∞–ø 1/7: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏...");
    const paragraphs = splitIntoSpans(contractText);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
    const chunks = createChunksWithTokens(
      paragraphs,
      CHUNKING_CONFIG.MAX_TOKENS_PER_CHUNK,
      CHUNKING_CONFIG.OVERLAP_SENTENCES
    );
    
    console.log(`üìÑ –î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–±–∏—Ç –Ω–∞ ${paragraphs.length} –∞–±–∑–∞—Ü–µ–≤ –∏ ${chunks.length} —á–∞–Ω–∫–æ–≤`);
    console.log(`üìä –í —Å—Ä–µ–¥–Ω–µ–º ${Math.round(paragraphs.length / chunks.length)} –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —á–∞–Ω–∫`);
    console.log(`üîë –î–æ—Å—Ç—É–ø–Ω–æ API –∫–ª—é—á–µ–π: ${keyPool.getAvailableKeyCount()}/${keyPool.getKeyCount()}`);
    
    // –≠—Ç–∞–ø 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
    onProgress("–≠—Ç–∞–ø 2/7: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞...");
    const chunkResults = await processChunksInParallel(chunks, checklistText, riskText, perspective, onProgress);
    
    // –≠—Ç–∞–ø 3: –°–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    const foundConditions: string[] = [];
    const allAnalysis: any[] = [];
    
    chunkResults.forEach(chunkResult => {
      if (chunkResult.analysis) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª AI
        const cleanedAnalysis = chunkResult.analysis.map((item: any) => {
          // –ï—Å–ª–∏ category: null, –Ω–æ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - –ø–µ—Ä–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ "ambiguous"
          if ((item.category === null || item.category === undefined) && 
              (item.comment || item.recommendation || item.improvedClause || item.legalRisk)) {
            console.warn(`‚ö†Ô∏è AI –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª: –ø—É–Ω–∫—Ç ${item.id} –∏–º–µ–µ—Ç category: null, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ü–µ—Ä–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ "ambiguous".`);
            return {
              ...item,
              category: 'ambiguous' // –ü–µ—Ä–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ
            };
          }
          return item;
        });
        
        allAnalysis.push(...cleanedAnalysis);
        cleanedAnalysis.forEach((item: any) => {
          // –¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (checklist) —Å—á–∏—Ç–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏
          // –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (partial) –ù–ï —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏
          if (item.category === 'checklist') {
            foundConditions.push(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ: –∞–±–∑–∞—Ü ${item.id}`);
          }
        });
      }
    });
    
    // –≠—Ç–∞–ø 3: –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –º–µ—Ç–æ–¥)
    onProgress("–≠—Ç–∞–ø 3/7: –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...");
    const missingResult = findMissingRequirementsReliable(allAnalysis, checklistText);
    console.log(`‚úÖ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ ${missingResult.missingRequirements?.length || 0} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
    
    // –≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏
    onProgress("–≠—Ç–∞–ø 4/7: –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏...");
    console.log(`üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –≠–¢–ê–ü 4: –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π`);
    console.log(`üìä DEBUG –≠–¢–ê–ü 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∏—Å–∫—É –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π (–∞–Ω–∞–ª–∏–∑–æ–≤: ${allAnalysis.length})`);
    
    let contradictionsResult;
    try {
      console.log(`üìä DEBUG –≠–¢–ê–ü 4: –í—ã–∑—ã–≤–∞—é findContradictions...`);
      contradictionsResult = await findContradictions(allAnalysis, paragraphs, perspective, onProgress);
      console.log(`üìä DEBUG –≠–¢–ê–ü 4: findContradictions –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, contradictionsResult);
      console.log(`‚úÖ –≠–¢–ê–ü 4 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ ${contradictionsResult.contradictions?.length || 0} –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π`);
    } catch (error) {
      console.error("‚ùå –û–®–ò–ë–ö–ê –í –≠–¢–ê–ü–ï 4:", error);
      contradictionsResult = { contradictions: [] };
    }
    
    // –≠—Ç–∞–ø 5: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤ –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏
    onProgress("–≠—Ç–∞–ø 5/7: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∞–≤...");
    console.log(`üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –≠–¢–ê–ü 5: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–∞–≤ –∏–∑ ${chunkResults.length} —á–∞–Ω–∫–æ–≤`);
    
    let rightsImbalanceResult;
    try {
      // –í—ã–∑–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ AI
      rightsImbalanceResult = aggregateAndAnalyzeRights(chunkResults, paragraphs); // <-- –ü–µ—Ä–µ–¥–∞—ë–º paragraphs
      console.log(`‚úÖ –≠–¢–ê–ü 5 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∞–≤: ${rightsImbalanceResult.rightsImbalance?.length || 0}`);
    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –≠–¢–ê–ü–ï 5:", error);
      rightsImbalanceResult = { rightsImbalance: [], overallConclusion: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø—Ä–∞–≤ –∏–∑ —á–∞–Ω–∫–æ–≤." };
    }
    
    // –≠—Ç–∞–ø 6: –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –æ–ø–µ—á–∞—Ç–æ–∫
    onProgress("–≠—Ç–∞–ø 6/8: –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤...");
    console.log(`üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –≠–¢–ê–ü 6: –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤`);
    let structuralDefectsResult: any[] = [];
    try {
      structuralDefectsResult = await findStructuralDefects(paragraphs, perspective, onProgress);
      console.log(`‚úÖ –≠–¢–ê–ü 6 –ó–ê–í–ï–†–®–ï–ù: –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤: ${structuralDefectsResult.length}`);
    } catch (error) {
      console.error("‚ùå –û–®–ò–ë–ö–ê –í –≠–¢–ê–ü–ï 6:", error);
      structuralDefectsResult = [];
    }
    
    // –≠—Ç–∞–ø 7: –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º)
    onProgress("–≠—Ç–∞–ø 7/8: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...");
    console.log(`üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –≠–¢–ê–ü 7: –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑`);
    const structuralResult = await performFinalStructuralAnalysis(
      allAnalysis, 
      missingResult.missingRequirements || [],
      contradictionsResult.contradictions || [],
      rightsImbalanceResult.rightsImbalance || [],
      perspective, 
      onProgress
    );
    console.log(`‚úÖ –≠–¢–ê–ü 7 –ó–ê–í–ï–†–®–ï–ù: –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑`);
    
    console.log(`üîÑ –ü–ï–†–ï–•–û–î–ò–ú –ö –≠–¢–ê–ü–£ 8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    
    // –≠—Ç–∞–ø 8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    onProgress("–≠—Ç–∞–ø 8/8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
    
    const contractParagraphs: ContractParagraph[] = paragraphs.map(paragraph => {
      const analysis = allAnalysis.find((item: any) => item.id === paragraph.id);
      
      return {
        id: paragraph.id,
        text: paragraph.text, // –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞
        category: analysis?.category || null,
        comment: analysis?.comment || null,
        recommendation: analysis?.recommendation || null,
        improvedClause: analysis?.improvedClause || null,
        legalRisk: analysis?.legalRisk || null,
        isExpanded: false,
      };
    });

    const missingRequirements: ContractParagraph[] = (missingResult.missingRequirements || []).map((req: any, index: number) => ({
      id: `missing_${index + 1}`,
      text: req.requirement || "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ",
      comment: req.comment || null,
      recommendation: req.recommendation || null,
      category: 'missing' as const,
    }));

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    const ambiguousConditions: ContractParagraph[] = contractParagraphs.filter(p => p.category === 'ambiguous');

    const finalStructuralAnalysis = structuralResult.structuralAnalysis || {
      overallAssessment: "–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω",
      keyRisks: [],
      structureComments: "",
      legalCompliance: "",
      recommendations: []
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const nullWithoutComments = contractParagraphs.filter(p => p.category === null && !p.comment && !p.recommendation).length;
    const nullWithComments = contractParagraphs.filter(p => p.category === null && (p.comment || p.recommendation)).length;
    
    const stats = {
      totalParagraphs: contractParagraphs.length,
      checklist: contractParagraphs.filter(p => p.category === 'checklist').length,
      partial: contractParagraphs.filter(p => p.category === 'partial').length,
      risk: contractParagraphs.filter(p => p.category === 'risk').length,
      ambiguous: ambiguousConditions.length,
      deemed_acceptance: contractParagraphs.filter(p => p.category === 'deemed_acceptance').length,
      external_refs: contractParagraphs.filter(p => p.category === 'external_refs').length,
      nullWithoutComments: nullWithoutComments,
      nullWithComments: nullWithComments, // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0
      missing: missingRequirements.length,
      contradictions: contradictionsResult.contradictions?.length || 0,
      rightsImbalance: rightsImbalanceResult.rightsImbalance?.length || 0,
    };

    console.log("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", stats);
    
    if (nullWithComments > 0) {
      console.warn(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ ${nullWithComments} –ø—É–Ω–∫—Ç–æ–≤ —Å category: null, –Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –û–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ "ambiguous".`);
    }
    onProgress("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");

    return {
      contractParagraphs,
      missingRequirements,
      ambiguousConditions,
      structuralAnalysis: finalStructuralAnalysis,
      contradictions: contradictionsResult.contradictions || [],
      rightsImbalance: rightsImbalanceResult.rightsImbalance || [],
      structuralDefects: structuralDefectsResult || []
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞:", error);
    
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    if (errorMessage?.includes('Candidate was blocked')) {
      throw new Error('–ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.');
    }
    
    if (errorMessage?.includes('–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã')) {
      throw new Error('–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–∏ –∫–≤–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏.');
    }
    
    if (errorMessage?.includes('Resource has been exhausted')) {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏.');
    }
    
    if (errorMessage?.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å') || errorMessage?.includes('Failed to parse')) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞: ${errorMessage}`);
  }
}