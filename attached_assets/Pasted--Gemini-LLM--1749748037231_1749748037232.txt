Вот готовый «дизайн-промпт», который можно отдать ИИ-разработчику (Gemini или другой LLM), чтобы тот сгенерировал полный исходный код веб-приложения. В промпте уже собраны все обязательные правила Google GenAI SDK[1], логика одного запроса, структура UI в стиле Hugging Face, формат подсветки абзацев и принцип работы чек-листа/рисков.

```
Act as a world-class full-stack web engineer and UX-designer.
Your task is to create (or update) a small SPA that analyses supply
contracts with Gemini API and highlights risky / non-compliant clauses
directly inside the contract text.

================================================================================
1. Общая информация
================================================================================
• Stack: Vite + React + TypeScript.  
• Файлы сейчас: index.html и index.tsx в формате ES-модулей.  
• Все изменения кода возвращай ТОЛЬКО в XML-блоке (см. правила ниже).  
• Код должен работать оффлайн, быть отзывчивым и доступным (ARIA).  
• Внешний вид — минималистичный, как huggingface.co (светлая палитра,
  моно-шрифт для текста договора, sticky-header, collapsible-карточки).

================================================================================
2. Функциональные требования
================================================================================
INPUTS  
  1. Большое textarea «Договор поставщика».  
  2. Textarea «Чек-лист требований Покупателя» (editable, заполнен шаблоном).  
  3. Textarea «Список рисков» (editable, заполнен шаблоном).  
  4. Кнопка «Проверить» — один вызов Gemini.

OUTPUT  
  • Полный текст договора, разбитый по абзацам `…`.  
  • Абзацы раскрашены:  
      checklist — зелёный фон `#E6FFE6`  
      risk      — красный  фон `#FFE6E6`  
      other     — жёлтый    фон `#FFF2CC`  
  • При наведении всплывает tooltip с комментарием ИИ.  
  • Сайдбар-легенда с чекбоксами «Только риски / Только несоответствия».  
  • Кнопка «Скачать DOCX с комментариями» (docx.js).  
  • Лоадер на время запроса и graceful-error-screen при 4xx/5xx.

================================================================================
3. Логика общения с моделью Gemini
================================================================================
• Используй @google/genai и только модель
  'gemini-2.5-flash-preview-04-17'[1].  
• Инициализация:
  ```
  import { GoogleGenAI } from "@google/genai";
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
  ```  
• Один generateContent-запрос с `responseMimeType: "application/json"`.  
• Перед вызовом разбей договор на абзацы и сформируй массив:
  `[ { id:"p1", text:"…" }, … ]`.  
• Полный prompt, который отправляется модели:

  ```
  role: system
  content: "Ты – AI-ассистент, специализирующийся на проверке договоров…"

  role: user
  content:
  Чек-лист требований:
  
  ---
  Список рисков:
  
  ---
  Договор:
  [
    {"id":"p1","text":"…"},
    …
  ]
  ---
  Требуемый JSON-ответ:
  {
    "analysis":[
      {"id":"p12","status":"Не соответствует","category":"risk","comment":"…"},
      …
    ]
  }
  ```

• После ответа:
  1. Очисти возможные markdown-fences.  
  2. `JSON.parse` и сопоставь `id` с абзацами.  
  3. Добавь CSS-класс по полю `category`, tooltip — из `comment`.

================================================================================
4. Правила Google GenAI SDK (must follow)[1]
================================================================================
• Импорт только `import { GoogleGenAI } from "@google/genai";`.  
• Ключ — строго `process.env.API_KEY`; не запрашивать у пользователя.  
• Нельзя использовать устаревшие классы (`GoogleGenerativeAI`, `models.getGenerativeModel`, …).  
• Один вызов `ai.models.generateContent` (или `Stream` для прогресса).  
• При ошибках — exponential backoff, не более 3 ретраев.  
• Не загружать полные тексты договоров в логи (храним только хэш).

================================================================================
5. Структура проекта
================================================================================
/index.html      – контейнер, подключение index.tsx  
/index.tsx       – React-корень, роуты не нужны  
/components/     – ContractInput.tsx, ChecklistInput.tsx, RiskInput.tsx,  
                   ResultViewer.tsx, SidebarFilters.tsx, Loader.tsx  
/hooks/          – useGeminiAnalysis.ts  
/utils/          – hash.ts, groupById.ts  
/styles/         – main.css (палитра Hugging Face), tooltip.css, docx.css

================================================================================
6. XML-формат отдачи кода
================================================================================
Возвращай только файлы, которые реально меняешь/создаёшь.
```

  …
  …
  …

```
Никакого пояснительного текста внутри блока.

================================================================================
7. Acceptance Criteria
================================================================================
✓ Пользователь может вставить большой договор, нажать «Проверить»  
✓ Через один запрос Gemini приходит JSON-разметка, абзацы подсвечены  
✓ Tooltip показывает комментарий ИИ, фильтры работают  
✓ DOCX-экспорт формирует комментарии как `w:comment`  
✓ Приложение валидно во всех современных браузерах, без внешнего API-ключа.

================================================================================
Remember: deliver stunning UI (Hugging Face vibe), clean readable code,
and full compliance with Google GenAI SDK guidelines. Good luck!
```

Источники  
— требования Google GenAI SDK, модель и формат вызовов[1]  
— лучшие практики просмотра/подсветки контрактов (highlight + risk scan)[3]  
— примеры контракт-AI приложений на Gemini для ориентира дизайна[2]

[1] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/69641368/607ef36d-a2cf-4a7a-837a-216bb0179c05/paste.txt
[2] https://ai.google.dev/competition/projects/contract-ai
[3] https://promptadvance.club/blog/chatgpt-prompts-for-contract-review
[4] https://www.rev.com/blog/writing-ai-prompts-legal-transcripts
[5] https://promptadvance.club/gemini-prompts/legal/contract-review
[6] https://ai.google.dev/gemini-api/docs/prompting-strategies
[7] https://cloud.google.com/vertex-ai/generative-ai/docs/prompt-gallery/samples/extraction_contract_analysis_36
[8] https://www.kaggle.com/code/danyalasgar/legal-document-analysis-using-gemini-1-5
[9] https://redmarble.ai/gemini-1-5-pro-for-contract-analysis-research-from-the-lab/
[10] https://kipwise.com/blog/ai-prompts
[11] https://promptsty.com/prompts-for-contract-negotiation/